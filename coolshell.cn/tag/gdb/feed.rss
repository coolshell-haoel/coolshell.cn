<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>GDB | 酷 壳 - CoolShell</title>
	<atom:link href="https://coolshell.cn/tag/gdb/feed" rel="self" type="application/rss+xml" />
	<link>https://coolshell.cn</link>
	<description>享受编程和技术所带来的快乐 - Coding Your Ambition</description>
	<lastBuildDate>Wed, 09 Feb 2011 14:28:25 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>GDB中应该知道的几个调试方法</title>
		<link>https://coolshell.cn/articles/3643.html</link>
					<comments>https://coolshell.cn/articles/3643.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Thu, 10 Feb 2011 01:34:08 +0000</pubDate>
				<category><![CDATA[编程工具]]></category>
		<category><![CDATA[GDB]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=3643</guid>

					<description><![CDATA[<p>七、八年前写过一篇《用GDB调试程序》，于是，从那以后，很多朋友在MSN上以及给我发邮件询问我关于GDB的问题，一直到今天，还有人在问GDB的相关问题。这么多年...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/3643.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/3643.html">GDB中应该知道的几个调试方法</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>七、八年前写过一篇《<a href="http://blog.csdn.net/haoel/archive/2003/07/02/2879.aspx" target="_blank">用GDB调试程序</a>》，于是，从那以后，很多朋友在MSN上以及给我发邮件询问我关于GDB的问题，一直到今天，还有人在问GDB的相关问题。这么多年来，有一些问题是大家反复在问的，一方面，我觉得我以前的文章可能没有说清楚，另一方面，我觉得大家常问的问题正是最有用的，所以，在这里罗列出来。希望大家补充。</p>
<h4>一、多线程调试</h4>
<p>多线程调试可能是问得最多的。其实，重要就是下面几个命令：</p>
<ul>
<li>info thread 查看当前进程的线程。</li>
<li>thread &lt;ID&gt; 切换调试的线程为指定ID的线程。</li>
<li>break file.c:100 thread all  在file.c文件第100行处为所有经过这里的线程设置断点。</li>
<li>set scheduler-locking off|on|step，这个是问得最多的。在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。
<ul>
<li>off 不锁定任何线程，也就是所有线程都执行，这是默认值。</li>
<li>on 只有当前被调试程序会执行。</li>
<li>step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。</li>
</ul>
</li>
</ul>
<h4>二、调试宏</h4>
<p>这个问题超多。在GDB下，我们无法print宏定义，因为宏是预编译的。但是我们还是有办法来调试宏，这个需要GCC的配合。</p>
<p>在GCC编译程序的时候，加上<strong>-ggdb3</strong>参数，这样，你就可以调试宏了。</p>
<p>另外，你可以使用下述的GDB的宏调试命令 来查看相关的宏。</p>
<ul>
<li>info macro &#8211; 你可以查看这个宏在哪些文件里被引用了，以及宏定义是什么样的。</li>
<li>macro &#8211; 你可以查看宏展开的样子。</li>
</ul>
<p><span id="more-3643"></span></p>
<h4>三、源文件</h4>
<p>这个问题问的也是很多的，太多的朋友都说找不到源文件。在这里我想提醒大家做下面的检查：</p>
<ol>
<li>编译程序员是否加上了-g参数以包含debug信息。</li>
<li>路径是否设置正确了。使用GDB的directory命令来设置源文件的目录。</li>
</ol>
<p>下面给一个调试/bin/ls的示例（ubuntu下）</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ apt-get source coreutils
$ sudo apt-get install coreutils-dbgsym
$ gdb /bin/ls
GNU gdb (GDB) 7.1-ubuntu
(gdb) list main
1192    ls.c: No such file or directory.
in ls.c
(gdb) directory ~/src/coreutils-7.4/src/
Source directories searched: /home/hchen/src/coreutils-7.4:$cdir:$cwd
(gdb) list main
1192        }
1193    }
1194
1195    int
1196    main (int argc, char **argv)
1197    {
1198      int i;
1199      struct pending *thispend;
1200      int n_files;
1201</pre>
<h4>四、条件断点</h4>
<p>条件断点是语法是：break  [where] if [condition]，这种断点真是非常管用。尤其是在一个循环或递归中，或是要监视某个变量。注意，这个设置是在GDB中的，只不过每经过那个断点时GDB会帮你检查一下条件是否满足。</p>
<h4>五、命令行参数</h4>
<p>有时候，我们需要调试的程序需要有命令行参数，很多朋友都不知道怎么设置调试的程序的命令行参数。其实，有两种方法：</p>
<ol>
<li>gdb命令行的 &#8211;args 参数</li>
<li>gdb环境中 set args命令。</li>
</ol>
<h4>六、gdb的变量</h4>
<p>有时候，在调试程序时，我们不单单只是查看运行时的变量，我们还可以直接设置程序中的变量，以模拟一些很难在测试中出现的情况，比较一些出错，或是switch的分支语句。使用set命令可以修改程序中的变量。</p>
<p>另外，你知道gdb中也可以有变量吗？就像shell一样，gdb中的变量以$开头，比如你想打印一个数组中的个个元素，你可以这样：</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">(gdb) set $i = 0

(gdb) p a[$i++]

...  #然后就一路回车下去了

</pre>
<p>当然，这里只是给一个示例，表示程序的变量和gdb的变量是可以交互的。</p>
<h4>七、x命令</h4>
<p>也许，你很喜欢用p命令。所以，当你不知道变量名的时候，你可能会手足无措，因为p命令总是需要一个变量名的。x命令是用来查看内存的，在gdb中 &#8220;help x&#8221; 你可以查看其帮助。</p>
<ul>
<li>x/x 以十六进制输出</li>
<li>x/d 以十进制输出</li>
<li>x/c 以单字符输出</li>
<li>x/i  反汇编 &#8211; 通常，我们会使用 <code>x/10i $ip-20 来查看当前的汇编（$ip是指令寄存器）</code></li>
<li>x/s 以字符串输出</li>
</ul>
<h4>八、command命令</h4>
<p>有一些朋友问我如何自动化调试。这里向大家介绍command命令，简单的理解一下，其就是把一组gdb的命令打包，有点像字处理软件的“宏”。下面是一个示例：</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">(gdb) break func
Breakpoint 1 at 0x3475678: file test.c, line 12.
(gdb) command 1
Type commands for when breakpoint 1 is hit, one per line.
End with a line saying just &quot;end&quot;.
&gt;print arg1
&gt;print arg2
&gt;print arg3
&gt;end
(gdb)</pre>
<p>当我们的断点到达时，自动执行command中的三个命令，把func的三个参数值打出来。</p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/1525.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg" alt="GDB 7.0 发布" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1525.html" class="wp_rp_title">GDB 7.0 发布</a></li><li ><a href="https://coolshell.cn/articles/1502.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/26.jpg" alt="高科技：GDB回溯调试" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1502.html" class="wp_rp_title">高科技：GDB回溯调试</a></li><li ><a href="https://coolshell.cn/articles/956.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/11.jpg" alt="《Vim Recipes》免费的Vim Cookbook" width="150" height="150" /></a><a href="https://coolshell.cn/articles/956.html" class="wp_rp_title">《Vim Recipes》免费的Vim Cookbook</a></li><li ><a href="https://coolshell.cn/articles/21214.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2020/12/go.pair_-150x150.png" alt="Go编程模式：委托和反转控制" width="150" height="150" /></a><a href="https://coolshell.cn/articles/21214.html" class="wp_rp_title">Go编程模式：委托和反转控制</a></li><li ><a href="https://coolshell.cn/articles/10739.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/12/lua-150x150.gif" alt="Lua简明教程" width="150" height="150" /></a><a href="https://coolshell.cn/articles/10739.html" class="wp_rp_title">Lua简明教程</a></li><li ><a href="https://coolshell.cn/articles/677.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/04/ncurses_example-150x150.jpg" alt="用Python写NCurses UI" width="150" height="150" /></a><a href="https://coolshell.cn/articles/677.html" class="wp_rp_title">用Python写NCurses UI</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/3643.html">GDB中应该知道的几个调试方法</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/3643.html/feed</wfw:commentRss>
			<slash:comments>43</slash:comments>
		
		
			</item>
		<item>
		<title>GDB 7.0 发布</title>
		<link>https://coolshell.cn/articles/1525.html</link>
					<comments>https://coolshell.cn/articles/1525.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Fri, 09 Oct 2009 08:39:16 +0000</pubDate>
				<category><![CDATA[技术新闻]]></category>
		<category><![CDATA[编程工具]]></category>
		<category><![CDATA[Debug]]></category>
		<category><![CDATA[GDB]]></category>
		<category><![CDATA[Reversable Debugging]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1525</guid>

					<description><![CDATA[<p>2009年10月06日，GDB7.0正式发布，新的版本你可以在这里下载。本次版本，不但有大家所关注的《GDB回溯调试技术》，同样还有其它大量的新特性，和对新平台...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1525.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1525.html">GDB 7.0 发布</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script><a href="http://www.gnu.org/software/gdb/mascot/"><img decoding="async" loading="lazy" class="alignright" title="GDB: The GNU Project Debugger 吉祥物" src="http://www.gnu.org/software/gdb/images/archer.jpg" alt="" width="200" height="125" /></a>2009年10月06日，GDB7.0正式发布，新的版本你可以在<a href="http://www.gnu.org/software/gdb/download/" target="_blank">这里下载</a>。本次版本，不但有大家所关注的《GDB<a href="https://coolshell.cn/articles/1502.html" target="_blank">回溯调试技术</a>》，同样还有其它大量的新特性，和对新平台的支持。</p>
<p>新版的GDB7.0支持如下新的平台或配置：</p>
<ul>
<li>x86/x86_64 Darwin</li>
<li>x86_64 MinGW</li>
<li>Lattice Mico32</li>
<li>x86/x86_64 DICOS</li>
<li>S+core 3</li>
<li>The remote stub now supports x86 Windows CE</li>
</ul>
<p>其主要的新加入的功能有：（看上去相当地高科技啊，很多术语都不知道怎么翻译，请注意后面的相关解释）</p>
<ul>
<li>Python 脚本调试</li>
<li>回溯调试，调式过程记录并重演。</li>
<li>不间隔调试。 Non-stop debugging</li>
<li>并行调试。 Multi-architecture debugging</li>
<li>多进程调试。Multi-inferior, multi-process debugging</li>
</ul>
<p><span id="more-1525"></span></p>
<blockquote><p><strong>注释：</strong></p>
<ul>
<li>Non-stop 的意思是，当我们在调试一个进程中的某一个或某一些线程时，可以让没有被调试的线程继续运行不停止。</li>
<li>Multi-architecture在字面上理解是多层架构，但应该是关于并行方面的（请大家指正），比如MIPS或SPARC等并行编程方面的。</li>
<li>Multi-inferior的意思是，你可以同时调试多个不同的进程。在某些情况下，这会更容易帮助我们了解程序的内部执行情况。</li>
</ul>
</blockquote>
<p>当然，本版本也包括了下面的一些改进和补丁：</p>
<p style="PADDING-LEFT: 30px; TEXT-ALIGN: left">* GDB 为JIT 提供了一个编译接口<br />
* Tracepoints 可以加上条件<br />
* 支持多字节和宽字符<br />
* 为&#8221;disassemble&#8221;新增加/r 和/m 参数<br />
* 对共享库的自动获取<br />
* 支持内联函数<br />
* 新的远程协议包<br />
* GDB 开始可以读取压缩调试片段<br />
* 在Tru64平台下支持线程切换<br />
* 支持Ada 任务切换<br />
* gdbserver的新功能 ——GDB remote stub<br />
* 一个新的命令，当有系统调用发生时可以停止正在运行的程序</p>
<p style="TEXT-ALIGN: left">(全文完)</p>
<p><!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/1502.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/26.jpg" alt="高科技：GDB回溯调试" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1502.html" class="wp_rp_title">高科技：GDB回溯调试</a></li><li ><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg" alt="eBPF 介绍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_title">eBPF 介绍</a></li><li ><a href="https://coolshell.cn/articles/3643.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/1.jpg" alt="GDB中应该知道的几个调试方法" width="150" height="150" /></a><a href="https://coolshell.cn/articles/3643.html" class="wp_rp_title">GDB中应该知道的几个调试方法</a></li><li ><a href="https://coolshell.cn/articles/1719.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/11/Rubber-Duck-150x150.jpg" alt="橡皮鸭程序调试法" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1719.html" class="wp_rp_title">橡皮鸭程序调试法</a></li><li ><a href="https://coolshell.cn/articles/1379.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/13.jpg" alt="如何调试bash脚本" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1379.html" class="wp_rp_title">如何调试bash脚本</a></li><li ><a href="https://coolshell.cn/articles/1242.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/18.jpg" alt="23,148,855,308,184,500" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1242.html" class="wp_rp_title">23,148,855,308,184,500</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1525.html">GDB 7.0 发布</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1525.html/feed</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>高科技：GDB回溯调试</title>
		<link>https://coolshell.cn/articles/1502.html</link>
					<comments>https://coolshell.cn/articles/1502.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Mon, 28 Sep 2009 09:14:08 +0000</pubDate>
				<category><![CDATA[技术读物]]></category>
		<category><![CDATA[编程工具]]></category>
		<category><![CDATA[Debug]]></category>
		<category><![CDATA[GDB]]></category>
		<category><![CDATA[Reversable Debugging]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1502</guid>

					<description><![CDATA[<p>也许大家知道，GDB 版本7.0 (2009年9月release) 会是第一次开始支持Reversable Debugging （回溯调式技术），这是一种可以让...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1502.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1502.html">高科技：GDB回溯调试</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>也许大家知道，GDB 版本7.0 (2009年9月release) 会是第一次开始支持Reversable Debugging （回溯调式技术），这是一种可以让在debug程序时当我们运行单步调试或是运行到断点时，可以以逆向执行程序的一种技术。（这是GNU的<a href="http://www.gnu.org/software/gdb/news/reversible.html" target="_blank">新闻链接</a>）</p>
<p>下面是GDB7.0版本所支持的回溯调试的命令，其中包括，continue，step，以及调试方向的设置。</p>
<li><strong>reverse-continue</strong> (&#8216;rc&#8217;) &#8212; 继续程序运行到断点，但是是逆向运行程序。</li>
<li><strong>reverse-finish</strong> &#8212; 逆向运行程序直到跳出本层函数。</li>
<li><strong>reverse-next</strong> (&#8216;rn&#8217;) &#8212; 语句单步向后跟踪程序。</li>
<li><strong>reverse-nexti</strong> (&#8216;rni&#8217;) &#8212; 指令单步向后一条指令。</li>
<li><strong>reverse-step</strong> (&#8216;rs&#8217;) &#8212; 向后执行一条语句，单步进入。</li>
<li><strong>reverse-stepi</strong> &#8212; 向后执行一条指令，单步进入。</li>
<li><strong>set exec-direction (forward/reverse)</strong> &#8212; 设置程序执行方向，向前或向后。</li>
<p><span id="more-1502"></span></p>
<p>在网上查了一下，发现VS2010好像也准备要支持这个东西，微软叫这个东西为“<a href="http://blogs.msdn.com/ianhu/archive/2009/05/13/historical-debugging-in-visual-studio-team-system-2010.aspx" target="_blank">Historical Debugging</a>”。</p>
<p>这个东西，对于我这个老家伙来说比较新鲜，而且还有点诡异。我有点没跟上这个技术，不知道这个技术主要是用来干什么？对于程序的运行的回滚？这样一来，如果，我某条语句创建了一个线程，或是一个文件，逆向执行回去，莫非它还能把这些程序创建出来的资源回收啦？就算是能回收，要是我的某个程序向网络发了些数据出去，莫非它还能给我再收回来？也许我想得太极端了，不过好像目前对这个技术的原始需求的说明不是很多，所以真不知道这个技术除了很酷，还有什么？也许是我理解错了，希望大家指点一下。<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/1525.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/24.jpg" alt="GDB 7.0 发布" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1525.html" class="wp_rp_title">GDB 7.0 发布</a></li><li ><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2022/12/eBPF-150x150.jpeg" alt="eBPF 介绍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/22320.html" class="wp_rp_title">eBPF 介绍</a></li><li ><a href="https://coolshell.cn/articles/3643.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/1.jpg" alt="GDB中应该知道的几个调试方法" width="150" height="150" /></a><a href="https://coolshell.cn/articles/3643.html" class="wp_rp_title">GDB中应该知道的几个调试方法</a></li><li ><a href="https://coolshell.cn/articles/1719.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/11/Rubber-Duck-150x150.jpg" alt="橡皮鸭程序调试法" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1719.html" class="wp_rp_title">橡皮鸭程序调试法</a></li><li ><a href="https://coolshell.cn/articles/1379.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/13.jpg" alt="如何调试bash脚本" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1379.html" class="wp_rp_title">如何调试bash脚本</a></li><li ><a href="https://coolshell.cn/articles/1242.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/18.jpg" alt="23,148,855,308,184,500" width="150" height="150" /></a><a href="https://coolshell.cn/articles/1242.html" class="wp_rp_title">23,148,855,308,184,500</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1502.html">高科技：GDB回溯调试</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1502.html/feed</wfw:commentRss>
			<slash:comments>17</slash:comments>
		
		
			</item>
	</channel>
</rss>
