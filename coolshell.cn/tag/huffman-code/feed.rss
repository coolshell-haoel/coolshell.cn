<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Huffman Code | 酷 壳 - CoolShell</title>
	<atom:link href="https://coolshell.cn/tag/huffman-code/feed" rel="self" type="application/rss+xml" />
	<link>https://coolshell.cn</link>
	<description>享受编程和技术所带来的快乐 - Coding Your Ambition</description>
	<lastBuildDate>Tue, 22 May 2012 08:23:34 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Huffman 编码压缩算法</title>
		<link>https://coolshell.cn/articles/7459.html</link>
					<comments>https://coolshell.cn/articles/7459.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Tue, 22 May 2012 05:32:05 +0000</pubDate>
				<category><![CDATA[杂项资源]]></category>
		<category><![CDATA[程序设计]]></category>
		<category><![CDATA[Algorithm]]></category>
		<category><![CDATA[Compress]]></category>
		<category><![CDATA[Huffman Code]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=7459</guid>

					<description><![CDATA[<p>前两天发布那个rsync算法后，想看看数据压缩的算法，知道一个经典的压缩算法Huffman算法。相信大家应该听说过 David Huffman 和他的压缩算法—...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/7459.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/7459.html">Huffman 编码压缩算法</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>前两天发布那个<a title="rsync 的核心算法" href="https://coolshell.cn/articles/7425.html" target="_blank">rsync算法</a>后，想看看数据压缩的算法，知道一个经典的压缩算法Huffman算法。相信大家应该听说过 <a title="David Huffman" href="http://en.wikipedia.org/wiki/David_A._Huffman" target="_blank">David Huffman</a> 和他的压缩算法—— <a href="http://en.wikipedia.org/wiki/Huffman_coding" target="_blank">Huffman Code</a>，一种通过字符出现频率，<a href="http://en.wikipedia.org/wiki/Priority_queue" target="_blank">Priority Queue</a>，和二叉树来进行的一种压缩算法，这种二叉树又叫Huffman二叉树 —— 一种带权重的树。从学校毕业很长时间的我忘了这个算法，但是网上查了一下，中文社区内好像没有把这个算法说得很清楚的文章，尤其是树的构造，而正好看到一篇国外的文章《<a href="http://en.nerdaholyc.com/huffman-coding-on-a-string/" target="_blank">A Simple Example of Huffman Code on a String</a>》，其中的例子浅显易懂，相当不错，我就转了过来。注意，我没有对此文完全翻译。</p>
<p>我们直接来看示例，如果我们需要来压缩下面的字符串：</p>
<p style="text-align: center;"><strong> “beep boop beer!” </strong></p>
<p>首先，我们先计算出每个字符出现的次数，我们得到下面这样一张表 :</p>
<p><center></p>
<table style="width: 250px; height: 200px;">
<tbody>
<tr>
<td><span style="font-size: 12px;">字符</span></td>
<td>次数</td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘b’</span></td>
<td><span style="font-size: 12px;">3</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘e’</span></td>
<td><span style="font-size: 12px;">4</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘p’</span></td>
<td><span style="font-size: 12px;">2</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘ ‘</span></td>
<td><span style="font-size: 12px;">2</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘o’</span></td>
<td><span style="font-size: 12px;">2</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘r’</span></td>
<td><span style="font-size: 12px;">1</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘!’</span></td>
<td><span style="font-size: 12px;">1</span></td>
</tr>
</tbody>
</table>
<p></center><br />
然后，我把把这些东西放到Priority Queue中（用出现的次数据当 priority），我们可以看到，Priority Queue 是以Prioirry排序一个数组，如果Priority一样，会使用出现的次序排序：下面是我们得到的Priority Queue：</p>
<p><span id="more-7459"></span></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2012/05/coada1.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-234 aligncenter" title="coada1" src="https://coolshell.cn/wp-content/uploads/2012/05/coada1.png" alt="" width="440" height="61" /></a></p>
<p>接下来就是我们的算法——把这个Priority Queue 转成二叉树。我们始终从queue的头取两个元素来构造一个二叉树（第一个元素是左结点，第二个是右结点），并把这两个元素的priority相加，并放回Priority中（再次注意，这里的Priority就是字符出现的次数），然后，我们得到下面的数据图表：</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2012/05/coada2.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-239" title="coada2" src="https://coolshell.cn/wp-content/uploads/2012/05/coada2.png" alt="" width="411" height="151" /></a></p>
<p>同样，我们再把前两个取出来，形成一个Priority为2+2=4的结点，然后再放回Priority Queue中 :</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2012/05/coada31.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-242 aligncenter" title="coada3" src="https://coolshell.cn/wp-content/uploads/2012/05/coada31.png" alt="" width="325" height="201" /></a></p>
<p>继续我们的算法（我们可以看到，这是一种自底向上的建树的过程）：</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2012/05/coada4.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-244 aligncenter" title="coada4" src="https://coolshell.cn/wp-content/uploads/2012/05/coada4.png" alt="" width="326" height="221" /></a></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2012/05/coada5.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-288 aligncenter" title="coada5" src="https://coolshell.cn/wp-content/uploads/2012/05/coada5.png" alt="" width="347" height="207" /></a></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2012/05/coada61.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-290 aligncenter" title="coada6" src="https://coolshell.cn/wp-content/uploads/2012/05/coada61.png" alt="" width="344" height="273" /></a></p>
<p>最终我们会得到下面这样一棵二叉树：</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2012/05/arbore_final.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-291 aligncenter" title="arbore_final" src="https://coolshell.cn/wp-content/uploads/2012/05/arbore_final.png" alt="" width="452" height="304" /></a></p>
<p>此时，我们把这个树的左支编码为0，右支编码为1，这样我们就可以遍历这棵树得到字符的编码，比如：‘b’的编码是 00，&#8217;p&#8217;的编码是101， ‘r&#8217;的编码是1000。<strong>我们可以看到出现频率越多的会越在上层，编码也越短，出现频率越少的就越在下层，编码也越长</strong>。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2012/05/arbore_final_numerotat.png"><img decoding="async" loading="lazy" class="alignnone size-full wp-image-292 aligncenter" title="arbore_final_numerotat" src="https://coolshell.cn/wp-content/uploads/2012/05/arbore_final_numerotat.png" alt="" width="452" height="304" /></a></p>
<p>最终我们可以得到下面这张编码表：</p>
<p><center></p>
<table style="width: 250px; height: 200px;">
<tbody>
<tr>
<td>字符</td>
<td>编码</td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘b’</span></td>
<td><span style="font-size: 12px;">00</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘e’</span></td>
<td><span style="font-size: 12px;">11</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘p’</span></td>
<td><span style="font-size: 12px;">101</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘ ‘</span></td>
<td><span style="font-size: 12px;">011</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘o’</span></td>
<td><span style="font-size: 12px;">010</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘r’</span></td>
<td><span style="font-size: 12px;">1000</span></td>
</tr>
<tr>
<td><span style="font-size: 12px;">‘!’</span></td>
<td><span style="font-size: 12px;">1001</span></td>
</tr>
</tbody>
</table>
<p></center><br />
这里需要注意一点，当我们encode的时候，我们是按“bit”来encode，decode也是通过bit来完成，比如，如果我们有这样的bitset “1011110111″ 那么其解码后就是 “pepe”。所以，我们需要通过这个二叉树建立我们Huffman编码和解码的字典表。</p>
<p>这里需要注意的一点是，我们的Huffman对各个字符的编码是不会冲突的，也就是说，<strong>不会存在某一个编码是另一个编码的前缀</strong>，不然的话就会大问题了。因为encode后的编码是没有分隔符的。</p>
<p style="text-align: left; padding-left: 30px;">于是，对于我们的原始字符串  beep boop beer!</p>
<p style="text-align: left; padding-left: 30px;">其对就能的二进制为 : 0110 0010 0110 0101 0110 0101 0111 0000 0010 0000 0110 0010 0110 1111 0110 1111 0111 0000 0010 0000 0110 0010 0110 0101 0110 0101 0111 0010 0010 0001</p>
<p style="text-align: left; padding-left: 30px;">我们的Huffman的编码为： 0011 1110 1011 0001 0010 1010 1100 1111 1000 1001</p>
<p>从上面的例子中，我们可以看到被压缩的比例还是很可观的。</p>
<p>作者给出了源码你可以看看（ C99标准） <a href="http://en.nerdaholyc.com/wp-content/uploads/2012/05/huffman_string.zip">Download the source files</a></p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/17225.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2015/08/cuckoo-150x150.jpg" alt="Cuckoo Filter：设计与实现" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17225.html" class="wp_rp_title">Cuckoo Filter：设计与实现</a></li><li ><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/29.jpg" alt="Leetcode 编程训练" width="150" height="150" /></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a></li><li ><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/08/puzzle-150x150.png" alt="谜题的答案和活动的心得体会" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_title">谜题的答案和活动的心得体会</a></li><li ><a href="https://coolshell.cn/articles/11832.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2014/08/538efefbgw1eiz9cvx78fj20rm0fmdi8-150x150.jpg" alt="【活动】解迷题送礼物" width="150" height="150" /></a><a href="https://coolshell.cn/articles/11832.html" class="wp_rp_title">【活动】解迷题送礼物</a></li><li ><a href="https://coolshell.cn/articles/10590.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview-150x150.jpeg" alt="二维码的生成细节和原理" width="150" height="150" /></a><a href="https://coolshell.cn/articles/10590.html" class="wp_rp_title">二维码的生成细节和原理</a></li><li ><a href="https://coolshell.cn/articles/10427.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2013/10/buddy-memory-allocation-150x150.jpg" alt="伙伴分配器的一个极简实现" width="150" height="150" /></a><a href="https://coolshell.cn/articles/10427.html" class="wp_rp_title">伙伴分配器的一个极简实现</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/7459.html">Huffman 编码压缩算法</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/7459.html/feed</wfw:commentRss>
			<slash:comments>138</slash:comments>
		
		
			</item>
	</channel>
</rss>
