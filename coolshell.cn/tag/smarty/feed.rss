<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Smarty | 酷 壳 - CoolShell</title>
	<atom:link href="https://coolshell.cn/tag/smarty/feed" rel="self" type="application/rss+xml" />
	<link>https://coolshell.cn</link>
	<description>享受编程和技术所带来的快乐 - Coding Your Ambition</description>
	<lastBuildDate>Fri, 17 Apr 2009 07:55:09 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>菜鸟学PHP之Smarty入门</title>
		<link>https://coolshell.cn/articles/559.html</link>
					<comments>https://coolshell.cn/articles/559.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Fri, 17 Apr 2009 07:55:09 +0000</pubDate>
				<category><![CDATA[PHP脚本]]></category>
		<category><![CDATA[技术读物]]></category>
		<category><![CDATA[程序设计]]></category>
		<category><![CDATA[编程语言]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Smarty]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=559</guid>

					<description><![CDATA[<p>　　刚开始接触模版引擎的 PHP 设计师，听到 Smarty 时，都会觉得很难。其实笔者也不例外，碰都不敢碰一下。但是后来在剖析 XOOPS 的程序架构时，开始...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/559.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/559.html">菜鸟学PHP之Smarty入门</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script>　　刚开始接触模版引擎的 PHP 设计师，听到 Smarty 时，都会觉得很难。其实笔者也不例外，碰都不敢碰一下。但是后来在剖析 XOOPS 的程序架构时，开始发现 Smarty 其实并不难。只要将 Smarty 基础功练好，在一般应用上就已经相当足够了。当然基础能打好，后面的进阶应用也就不用怕了。<br />
　　<br />
　　这篇文章的主要用意并非要深入探讨 Smarty 的使用，这在<span class="t_tag">官方</span>使用说明中都已经写得很完整了。笔者仅在此写下一些自己使用上的心得，让想要了解 Smarty 却不得其门而入的<span class="t_tag">朋友</span>，可以从中得到一些启示。就因为这篇文章的内容不是非常深入，会使用 Smarty 的朋友们可能会觉得简单了点。<br />
　　<br />
<span id="more-559"></span>　<br />
　　<strong>Smarty介绍<br />
　　<br />
　　什么是模版引擎</strong><br />
　　<br />
　　不知道从什么时候开始，有人开始对 HTML 内嵌入 Server Script 觉得不太满意。然而不论是微软的 ASP 或是开放<span class="t_tag">源码</span>的 PHP，都是属于内嵌 Server Script 的<span class="t_tag">网页</span>伺服端语言。因此也就有人想到，如果能把程序应用逻辑 (或称商业应用逻辑) 与网页呈现 (Layout) 逻辑分离的话，是不是会比较好呢？<br />
　　<br />
　　其实这个问题早就存在已久，从交互式网页开始风行时，不论是 ASP 或是 PHP 的使用者都是身兼程序开发者与视觉设计师两种身份。可是通常这些使用者不是程序强就是美工强，如果要两者同时兼顾，那可得死掉不少脑细胞&#8230;<br />
　　<br />
　　所以模版引擎就应运而生啦！模版引擎的目的，就是要达到上述提到的逻辑分离的<span class="t_tag">功能</span>。它能让程序开发者专注于资料的控制或是功能的达成；而视觉设计师则可专注于网页排版，让网页看起来更具有专业感！因此模版引擎很适合公司的网站开发团队使用，使每个人都能发挥其专长！<br />
　　<br />
　　就笔者接触过的模版引擎来说，依资料呈现方式大概分成：需搭配程序处理的模版引擎和完全由模版本身自行决定的模版引擎两种形式。<br />
　　<br />
　　在需搭配程序处理的模版引擎中，程序开发者必须要负责变量的呈现逻辑，也就是说他必须把变量的内容在输出到模版前先处理好，才能做 assign 的工作。换句话说，程序开发者还是得多写一些程序来决定变量呈现的风貌。而完全由模版本身自行决定的模版引擎，它允许变量直接 assign 到模版中，让视觉设计师在设计模版时再决定变量要如何呈现。因此它就可能会有另一套属于自己的模版程序语法 (如 Smarty) ，以方便控制变量的呈现。但这样一来，视觉设计师也得学习如何使用模版语言。<br />
　　<br />
　　模版引擎的运作原理，首先我们先看看以下的运行图：<br />
　　 　<img decoding="async" loading="lazy" src="http://linux.chinaitlab.com/imgfiles/2005.11.30.14.32.31.13.1.gif" alt="" width="400" height="450" /><br />
　　一般的模版引擎 (如 PHPLib) 都是在建立模版对象时取得要解析的模版，然后把变量套入后，透过 parse() 这个方法来解析模版，最后再将网页输出。<br />
　　 　<img decoding="async" loading="lazy" src="http://linux.chinaitlab.com/imgfiles/2005.11.30.14.32.38.13.2.gif" alt="" width="400" height="600" /><br />
　　对 Smarty 的使用者来说，程序里也不需要做任何 parse 的动作了，这些 Smarty 自动会帮我们做。而且已经<span class="t_tag">编译</span>过的网页，如果模版没有变动的话， Smarty 就自动跳过编译的动作，直接执行编译过的网页，以节省编译的时间。<br />
　　<br />
　　<strong>使用Smarty的一些概念</strong><br />
　　<br />
　　在一般模版引擎中，我们常看到区域的观念，所谓区块大概都会长成这样：<br />
　　&lt;!&#8211; START : Block name &#8211;&gt;<br />
　　区域内容<br />
　　&lt;!&#8211; END : Block name &#8211;&gt;<br />
　　<br />
　　这些区块大部份都会在 PHP 程序中以 if 或 for, while 来控制它们的显示状态，虽然模版看起来简洁多了，但只要一换了显示方式不同的模版， PHP 程序势必要再改一次！<br />
　　<br />
　　在 Smarty 中，一切以变量为主，所有的呈现逻辑都让模版自行控制。因为 Smarty 会有自己的模版语言，所以不管是区块是否要显示还是要重复，都是用 Smarty 的模版语法 (if, foreach, section) 搭配变量内容作呈现。这样一来感觉上好象模版变得有点复杂，但好处是只要规划得当， PHP 程序一行都不必改。<br />
　　<br />
　　由上面的说明，我们可以知道使用Smarty 要掌握一个原则：将程序应用逻辑与网页呈现逻辑明确地分离。就是说 PHP 程序里不要有太多的 HTML 码。程序中只要决定好那些变量要塞到模版里，让模版自己决定该如何呈现这些变量 (甚至不出现也行) 。<br />
　　<br />
　　<strong>Smarty的基础<br />
　　<br />
　　安装Smarty</strong><br />
　　<br />
　　首先，我们先决定程序放置的位置。<br />
　　<br />
　　<a href="http://windows.chinaitlab.com/" target="_blank"><span style="color: #0000ff;">Windows</span></a>下可能会类似这样的位置：「 d:\appserv\web\demo\ 」。<br />
　　<br />
　　Linux下可能会类似这样的位置：「 /home/jaceju/public_html/ 」。<br />
　　<br />
　　到Smarty的官方网站<a href="http://download.chinaitlab.com/" target="_blank"><span style="color: #0000ff;"><span class="t_tag">下载</span></span></a>最新的Smarty套件：<a href="http://smarty.php.net/" target="_blank">http://smarty.php.net</a>。<br />
　　<br />
　　解开 Smarty 2.6.0 后，会看到很多档案，其中有个 libs 资料夹。在 libs 中应该会有 3 个 class.php 檔 + 1 个 debug.tpl + 1 个 plugin 资料夹 + 1 个 core 资料夹。然后直接将 libs 复制到您的程序主资料夹下，再更名为 class 就可以了。就这样？没错！这种安装法比较简单，适合一般没有自己主机的使用者。<br />
　　<br />
　　至于 Smarty 官方手册中为什么要介绍一些比较复杂的安装方式呢？基本上依照官方的方式安装，可以只在主机安装一次，然后提供给该主机下所有设计者开发不同程序时直接引用，而不会重复安装太多的 Smarty 复本。而笔者所提供的方式则是适合要把程序带过来移过去的程序开发者使用，这样不用烦恼主机有没有安装 Smarty 。<br />
　　<br />
　　<strong>程序的资料夹设定</strong><br />
　　<br />
　　以笔者在<a href="http://windows.chinaitlab.com/" target="_blank"><span style="color: #0000ff;">Windows</span></a>安装Appserv为例，程序的主资料夹是「d:\appserv\web\demo\」。安装好Smarty后，我们在主资料夹下再建立这样的资料夹：<br />
　　 　<img decoding="async" loading="lazy" src="http://linux.chinaitlab.com/imgfiles/2005.11.30.14.32.46.13.3.gif" alt="" width="156" height="135" /><br />
　　在 Linux 底下，请记得将 templates_c 的权限变更为 777 。Windows 下则将其只读取消。<br />
　　<br />
　　<strong>第一个用Smarty写的小程序</strong><br />
　　<br />
　　我们先设定 Smarty 的路径，请将以下这个档案命名为 main.php ，并放置到主资料夹下：<br />
　　<br />
　　main.php:</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　include &quot;class/Smarty.class.php&quot;;
　　define(&#039;__SITE_ROOT&#039;, &#039;d:/appserv/web/demo&#039;); // 最后没有斜线
　　$tpl = new Smarty();
　　$tpl-&gt;template_dir = __SITE_ROOT . &quot;/templates/&quot;;
　　$tpl-&gt;compile_dir = __SITE_ROOT . &quot;/templates_c/&quot;;
　　$tpl-&gt;config_dir = __SITE_ROOT . &quot;/configs/&quot;;
　　$tpl-&gt;cache_dir = __SITE_ROOT . &quot;/cache/&quot;;
　　$tpl-&gt;left_delimiter = &#039;&lt;{&#039;;
　　$tpl-&gt;right_delimiter = &#039;}&gt;&#039;;
　　?&gt;
　　</pre>
<p>　　照上面方式设定的用意在于，程序如果要移植到其它地方，只要改 __SITE_ROOT 就可以啦。 (这里是参考 XOOPS 的 )<br />
　　<br />
　　Smarty 的模版路径设定好后，程序会依照这个路径来抓所有模版的相对位置 (范例中是 &#8216;d:/appserv/web/demo/templates/&#8217; ) 。然后我们用 display() 这个 Smarty 方法来显示我们的模版。<br />
　　<br />
　　接下来我们在 templates 资料夹下放置一个 test.htm：(扩展名叫什么都无所谓，但便于视觉设计师开发，笔者都还是以 .htm 为主。)<br />
　　<br />
　　templates/test.htm:</p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">
　　&lt;html&gt;
　　&lt;head&gt;
　　&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=big5&quot;&gt;
　　&lt;title&gt;&lt;{$title}&gt;&lt;/title&gt;
　　&lt;/head&gt;
　　&lt;body&gt;
　　&lt;{$content}&gt;
　　&lt;/body&gt;
　　&lt;/html&gt;
　　</pre>
<p>　　现在我们要将上面的模版显示出来，并将网页标题 ($title) 与内容 ($content) 更换，请将以下档案内容命名为 test.php ，并放置在主资料夹下：<br />
　　<br />
　　test.php:</p>
<p>       </p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　require &quot;main.php&quot;;
　　$tpl-&gt;assign(&quot;title&quot;, &quot;测试用的网页标题&quot;);
　　$tpl-&gt;assign(&quot;content&quot;, &quot;测试用的网页内容&quot;);
　　// 上面两行也可以用这行代替
　　// $tpl-&gt;assign(array(&quot;title&quot; =&gt; &quot;测试用的网页标题&quot;, &quot;content&quot; =&gt; &quot;测试用的网页内容&quot;));
　　$tpl-&gt;display(&#039;test.htm&#039;);
　　?&gt;
　　</pre>
<p>　　请打开浏览器，输入 http://localhost/demo/test.php 试试看(依您的环境决定网址)，应该会看到以下的画面：<br />
　　 　<img decoding="async" loading="lazy" src="http://linux.chinaitlab.com/imgfiles/2005.11.30.14.32.52.13.4.gif" alt="" width="287" height="217" /><br />
　　再到 templates_c 底下，我们会看到一个奇怪的资料夹 (%%179) ，再点选下去也是一个奇怪的资料夹 (%%1798044067) ，而其中有一个档案：<br />
　　<br />
　　templates_c/%%179/%%1798044067/test.htm.php:</p>
<p>        </p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">
　　&lt;?php /* Smarty version 2.6.0, created on 2003-12-15 22:19:45 compiled from test.htm */ ?&gt;
　　&lt;html&gt;
　　&lt;head&gt;
　　&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=big5&quot;&gt;
　　&lt;title&gt;&lt;?php echo $this-&gt;_tpl_vars[&#039;title&#039;]; ?&gt;&lt;/title&gt;
　　&lt;/head&gt;
　　&lt;body&gt;
　　&lt;?php echo $this-&gt;_tpl_vars[&#039;content&#039;]; ?&gt;
　　&lt;/body&gt;
　　&lt;/html&gt;
　　</pre>
<p>　　没错，这就是 Smarty 编译过的档案。它将我们在模版中的变量转换成了 PHP 的语法来执行，下次再读取同样的内容时， Smarty 就会直接抓取这个档案来执行了。<br />
　　<br />
　　最后我们整理一下整个 Smarty 程序撰写步骤：<br />
　　<br />
　　Step 1. 加载 Smarty 模版引擎。<br />
　　<br />
　　Step 2. 建立 Smarty 对象。<br />
　　<br />
　　Step 3. 设定 Smarty 对象的参数。<br />
　　<br />
　　Step 4. 在程序中处理变量后，再用 Smarty 的 assign 方法将变量置入模版里。<br />
　　<br />
　　Step 5. 利用 Smarty 的 display 方法将网页秀出。<br />
　　<br />
　　<strong>如何安排你的程序架构</strong><br />
　　<br />
　　上面我们看到除了 Smarty 所需要的资料夹外 (class 、 configs 、 templates 、 templates_c) ，还有两个资料夹： includes 、 modules 。其实这是笔者模仿 XOOPS 的架构所建立出来的，因为 XOOPS 是笔者所接触到的程序中，少数使用 Smarty 模版引擎的架站程序。所谓西瓜偎大边，笔者这样的程序架构虽没有 XOOPS 的百分之一强，但至少给人看时还有 XOOPS 撑腰。<br />
　　<br />
　　includes 这个资料夹主要是用来放置一些 function 、 sql 檔，这样在 main.php 就可以将它们引入了，如下：<br />
　　<br />
　　main.php:<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　include &quot;class/Smarty.class.php&quot;;
　　define(&#039;__SITE_ROOT&#039;, &#039;d:/appserv/web/demo&#039;); // 最后没有斜线
　　// 以 main.php 的位置为基准
　　require_once &quot;includes/functions.php&quot;;
　　require_once &quot;includes/include.php&quot;;
　　$tpl = new Smarty();
　　$tpl-&gt;template_dir = __SITE_ROOT . &quot;/templates/&quot;;
　　$tpl-&gt;compile_dir = __SITE_ROOT . &quot;/templates_c/&quot;;
　　$tpl-&gt;config_dir = __SITE_ROOT . &quot;/configs/&quot;;
　　$tpl-&gt;cache_dir = __SITE_ROOT . &quot;/cache/&quot;;
　　$tpl-&gt;left_delimiter = &#039;&lt;{&#039;;
　　$tpl-&gt;right_delimiter = &#039;}&gt;&#039;;
　　?&gt;
　　</pre>
<p>　　modules 这个资料夹则是用来放置程序模块的，如此一来便不会把程序丢得到处都是，整体架构一目了然。<br />
　　<br />
　　上面我们也提到 main.php ，这是整个程序的主要核心，不论是常数定义、外部程序加载、共享变量建立等，都是在这里开始的。所以之后的模块都只要将这个档案包含进来就可以啦。因此在程序流程规划期间，就必须好好构思 main.php 中应该要放那些东西；当然利用 include 或 require 指令，把每个环节清楚分离是再好不过了。<br />
　　 　<img decoding="async" loading="lazy" src="http://linux.chinaitlab.com/imgfiles/2005.11.30.14.32.59.13.5.gif" alt="" width="180" height="310" /><br />
　　在上节提到的 Smarty 程序 5 步骤， main.php 就会帮我们先将前 3 个步骤做好，后面的模块程序只要做后面两个步骤就可以了。<br />
　　<br />
　　<strong>从变量开始</strong><br />
　　<br />
　　如何使用变量<br />
　　<br />
　　从上一章范例中，我们可以清楚地看到我们利用 &lt;{ 及 }&gt; 这两个标示符号将变量包起来。预设的标示符号为 { 及 } ，但为了中文冲码及 <a href="http://java.chinaitlab.com/" target="_blank"><span style="color: #0000ff;">Java</span></a>script 的关系，因此笔者还是模仿 XOOPS ，将标示符号换掉。变量的命名方式和 PHP 的变量命名方式是一模一样的，前面也有个 $ 字号 (这和一般的模版引擎不同)。标示符号就有点像是 PHP 中的 &lt;?php 及 ?&gt; (事实上它们的确会被替换成这个) ，所以以下的模版变量写法都是可行的：<br />
　　<br />
　　1. &lt;{$var}&gt;<br />
　　<br />
　　2. &lt;{ $var }&gt; &lt;!&#8211; 和变量之间有空格 &#8211;&gt;<br />
　　<br />
　　3. &lt;{$var<br />
　　<br />
　　}&gt; &lt;!&#8211; 启始的标示符号和结束的标示符号不在同一行 &#8211;&gt;<br />
　　在 Smarty 里，变量预设是全域的，也就是说你只要指定一次就好了。指定两次以上的话，变量内容会以最后指定的为主。就算我们在主模版中加载了外部的子模版，子模版中同样的变量一样也会被替代，这样我们就不用再针对子模版再做一次解析的动作。<br />
　　<br />
　　而在 PHP 程序中，我们用 Smarty 的 assign 来将变量置放到模版中。 assign 的用法官方手册中已经写得很多了，用法就如同上一节的范例所示。不过在重复区块时，我们就必须将变量做一些手脚后，才能将变量 assign 到模版中，这在下一章再提。<br />
　　<br />
　　<strong>修饰你的变量</strong><br />
　　<br />
　　上面我们提到 Smarty 变量呈现的风貌是由模版自行决定的，所以 Smarty 提供了许多修饰变量的函式。使用的方法如下：<br />
　　<br />
　　&lt;{变量|修饰函式}&gt; &lt;!&#8211; 当修饰函式没有参数时 &#8211;&gt;<br />
　　<br />
　　&lt;{变量|修饰函式:&#8221;参数(非必要，视函式而定)&#8221;}&gt; &lt;!&#8211; 当修饰函式有参数时 &#8211;&gt;<br />
　　范例如下：<br />
　　<br />
　　&lt;{$var|nl2br}&gt; &lt;!&#8211; 将变量中的换行字符换成 &lt;br /&gt; &#8211;&gt;<br />
　　<br />
　　&lt;{$var|string_format:&#8221;%02d&#8221;}&gt; &lt;!&#8211; 将变量格式化 &#8211;&gt;<br />
　　好，那为什么要让模版自行决定变量呈现的风貌？先看看底下的 HTML ，这是某个购物车结帐的部份画面。<br />
　　<br />
　　&lt;input name=&#8221;total&#8221; type=&#8221;hidden&#8221; value=&#8221;21000&#8243; /&gt;<br />
　　<br />
　　总金额：21,000 元<br />
　　一般模版引擎的模版可能会这样写：<br />
　　<br />
　　&lt;input name=&#8221;total&#8221; type=&#8221;hidden&#8221; value=&#8221;{total}&#8221; /&gt;<br />
　　<br />
　　总金额：{format_total} 元<br />
　　它们的 PHP 程序中要这样写：<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　$total = 21000;
　　$tpl-&gt;assign(&quot;total&quot;, $total);
　　$tpl-&gt;assign(&quot;format_total&quot;, number_format($total));
　　?&gt;
　　</pre>
<p>　　而 Smarty 的模版就可以这样写： (number_format 修饰函式请到Smarty 官方网页<a href="http://download.chinaitlab.com/" target="_blank"><span style="color: #0000ff;">下载</span></a>)<br />
　　<br />
　　&lt;input name=&#8221;total&#8221; type=&#8221;hidden&#8221; value=&#8221;&lt;{$total}&gt;&#8221; /&gt;<br />
　　<br />
　　总金额：&lt;{$total|number_format:&#8221;&#8221;}&gt; 元<br />
　　Smarty 的 PHP 程序中只要这样写：<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　$total = 21000;
　　$tpl-&gt;assign(&quot;total&quot;, $total);
　　?&gt;
　　</pre>
<p>　　所以在 Smarty 中我们只要指定一次变量，剩下的交给模版自行决定即可。这样了解了吗？这就是让模版自行决定变量呈现风貌的好处！<br />
　　<br />
　　<strong>控制模版的内容<br />
　　<br />
　　重复的区块</strong><br />
　　<br />
　　在 Smarty 样板中，我们要重复一个区块有两种方式： foreach 及 section 。而在程序中我们则要 assign 一个数组，这个数组中可以包含数组数组。就像下面这个例子：<br />
　　<br />
　　首先我们来看 PHP 程序是如何写的：<br />
　　<br />
　　test2.php:<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　require &quot;main.php&quot;;
　　$array1 = array(1 =&gt; &quot;苹果&quot;, 2 =&gt; &quot;菠萝&quot;, 3 =&gt; &quot;香蕉&quot;, 4 =&gt; &quot;芭乐&quot;);
　　$tpl-&gt;assign(&quot;array1&quot;, $array1);
　　$array2 = array(
　　array(&quot;index1&quot; =&gt; &quot;data1-1&quot;, &quot;index2&quot; =&gt; &quot;data1-2&quot;, &quot;index3&quot; =&gt; &quot;data1-3&quot;),
　　array(&quot;index1&quot; =&gt; &quot;data2-1&quot;, &quot;index2&quot; =&gt; &quot;data2-2&quot;, &quot;index3&quot; =&gt; &quot;data2-3&quot;),
　　array(&quot;index1&quot; =&gt; &quot;data3-1&quot;, &quot;index2&quot; =&gt; &quot;data3-2&quot;, &quot;index3&quot; =&gt; &quot;data3-3&quot;),
　　array(&quot;index1&quot; =&gt; &quot;data4-1&quot;, &quot;index2&quot; =&gt; &quot;data4-2&quot;, &quot;index3&quot; =&gt; &quot;data4-3&quot;),
　　array(&quot;index1&quot; =&gt; &quot;data5-1&quot;, &quot;index2&quot; =&gt; &quot;data5-2&quot;, &quot;index3&quot; =&gt; &quot;data5-3&quot;));
　　$tpl-&gt;assign(&quot;array2&quot;, $array2);
　　$tpl-&gt;display(&quot;test2.htm&quot;);
　　?&gt;
　　</pre>
<p>　　而模版的写法如下：<br />
　　<br />
　　templates/test2.htm:<br />
　　</p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">
　　&lt;html&gt;
　　&lt;head&gt;
　　&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=big5&quot;&gt;
　　&lt;title&gt;测试重复区块&lt;/title&gt;
　　&lt;/head&gt;
　　&lt;body&gt;
　　
&lt;pre&gt;
　　利用 foreach 来呈现 array1
　　&lt;{foreach item=item1 from=$array1}&gt;
　　&lt;{$item1}&gt;
　　&lt;{/foreach}&gt;
　　利用 section 来呈现 array1
　　&lt;{section name=sec1 loop=$array1}&gt;
　　&lt;{$array1[sec1]}&gt;
　　&lt;{/section}&gt;
　　利用 foreach 来呈现 array2
　　&lt;{foreach item=index2 from=$array2}&gt;
　　&lt;{foreach key=key2 item=item2 from=$index2}&gt;
　　&lt;{$key2}&gt;: &lt;{$item2}&gt;
　　&lt;{/foreach}&gt;
　　&lt;{/foreach}&gt;
　　利用 section 来呈现 array1
　　&lt;{section name=sec2 loop=$array2}&gt;
　　index1: &lt;{$array2[sec2].index1}&gt;
　　index2: &lt;{$array2[sec2].index2}&gt;
　　index3: &lt;{$array2[sec2].index3}&gt;
　　&lt;{/section}&gt;
　　&lt;/pre&gt;
　　&lt;/body&gt;
　　&lt;/html&gt;
　　</pre>
<p>　　执行上例后，我们发现不管是 foreach 或 section 两个执行结果是一样的。那么两者到底有何不同呢？<br />
　　<br />
　　第一个差别很明显，就是foreach 要以巢状处理的方式来呈现我们所 assign 的两层数组变量，而 section 则以「主数组[循环名称].子数组索引」即可将整个数组呈现出来。由此可知， Smarty 在模版中的 foreach 和 PHP 中的 foreach 是一样的；而 section 则是 Smarty 为了处理如上列的数组变量所发展出来的叙述。当然 section 的功能还不只如此，除了下一节所谈到的巢状资料呈现外，官方手册中也提供了好几个 section 的应用范例。<br />
　　<br />
　　不过要注意的是，丢给 section 的数组索引必须是从 0 开始的正整数，即 0, 1, 2, 3, &#8230;。如果您的数组索引不是从 0 开始的正整数，那么就得改用 foreach 来呈现您的资料。您可以参考官方讨论区中的此篇讨论，其中探讨了 section 和 foreach 的用法。<br />
　　<br />
　　<strong>巢状资料的呈现</strong><br />
　　<br />
　　模版引擎里最令人伤脑筋的大概就是巢状资料的呈现吧，许多著名的模版引擎都会特意强调这点，不过这对 Smarty 来说却是小儿科。<br />
　　<br />
　　最常见到的巢状资料，就算论譠程序中的讨论主题区吧。假设要呈现的结果如下：<br />
　　<br />
　　公告区<br />
　　<br />
　　站务公告<br />
　　<br />
　　文学专区<br />
　　<br />
　　好书介绍<br />
　　<br />
　　奇文共赏<br />
　　<br />
　　计算机专区<br />
　　<br />
　　硬件外围<br />
　　<br />
　　<span class="t_tag">软件</span>讨论<br />
　　<br />
　　程序中我们先以静态资料为例：<br />
　　<br />
　　test3.php:<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　require &quot;main.php&quot;;
　　$forum = array(
　　array(&quot;category_id&quot; =&gt; 1, &quot;category_name&quot; =&gt; &quot;公告区&quot;,
　　&quot;topic&quot; =&gt; array(
　　array(&quot;topic_id&quot; =&gt; 1, &quot;topic_name&quot; =&gt; &quot;站务公告&quot;)
　　)
　　),
　　array(&quot;category_id&quot; =&gt; 2, &quot;category_name&quot; =&gt; &quot;文学专区&quot;,
　　&quot;topic&quot; =&gt; array(
　　array(&quot;topic_id&quot; =&gt; 2, &quot;topic_name&quot; =&gt; &quot;好书介绍&quot;),
　　array(&quot;topic_id&quot; =&gt; 3, &quot;topic_name&quot; =&gt; &quot;奇文共赏&quot;)
　　)
　　),
　　array(&quot;category_id&quot; =&gt; 3, &quot;category_name&quot; =&gt; &quot;计算机专区&quot;,
　　&quot;topic&quot; =&gt; array(
　　array(&quot;topic_id&quot; =&gt; 4, &quot;topic_name&quot; =&gt; &quot;硬件外围&quot;),
　　array(&quot;topic_id&quot; =&gt; 5, &quot;topic_name&quot; =&gt; &quot;软件讨论&quot;)
　　)
　　)
　　);
　　$tpl-&gt;assign(&quot;forum&quot;, $forum);
　　$tpl-&gt;display(&quot;test3.htm&quot;);
　　?&gt;
　　</pre>
<p>　　模版的写法如下：<br />
　　<br />
　　templates/test3.htm:<br />
　　</p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">
　　&lt;html&gt;
　　&lt;head&gt;
　　&lt;title&gt;巢状循环测试&lt;/title&gt;
　　&lt;/head&gt;
　　&lt;body&gt;
　　
&lt;table width=&quot;200&quot; border=&quot;0&quot; align=&quot;center&quot; cellpadding=&quot;3&quot; cellspacing=&quot;0&quot;&gt;
　　&lt;{section name=sec1 loop=$forum}&gt;
　　
&lt;tr&gt;
　　
&lt;td colspan=&quot;2&quot;&gt;&lt;{$forum[sec1].category_name}&gt;&lt;/td&gt;
　　&lt;/tr&gt;
　　&lt;{section name=sec2 loop=$forum[sec1].topic}&gt;
　　
&lt;tr&gt;
　　
&lt;td width=&quot;25&quot;&gt;&lt;/td&gt;
　　
&lt;td width=&quot;164&quot;&gt;&lt;{$forum[sec1].topic[sec2].topic_name}&gt;&lt;/td&gt;
　　&lt;/tr&gt;
　　&lt;{/section}&gt;
　　&lt;{/section}&gt;
　　&lt;/table&gt;
　　&lt;/body&gt;
　　&lt;/html&gt;
　　</pre>
<p>　　执行的结果就像笔者举的例子一样。<br />
　　<br />
　　因此呢，在程序中我们只要想<span class="t_tag">办法</span>把所要重复值一层一层的塞到数组中，再利用 &lt;{第一层数组[循环1].第二层数组[循环2].第三层数组[循环3]. &#8230; .数组索引}&gt; 这样的方式来显示每一个巢状循环中的值。至于用什么方法呢？下一节使用<span class="t_tag">数据库</span>时我们再提。<br />
　　<br />
　　<strong>转换<span class="t_tag">数据</span>库中的资料</strong><br />
　　<br />
　　上面提到如何显示巢状循环，而实际上应用时我们的资料可能是从数据库中抓取出来的，所以我们就得想办法把数据库的资料变成上述的多重数组的形式。这里笔者用一个 DB 类别来抓取数据库中的资料，您可以自行用您喜欢的方法。<br />
　　<br />
　　我们只修改 PHP 程序，模版还是上面那个 (这就是模版引擎的好处~)，其中 $db 这个对象假设已经在 main.php 中建立好了，而且抓出来的资料就是上面的例子。<br />
　　<br />
　　test3.php:<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　require &quot;main.php&quot;;
　　// 先建立第一层数组
　　$category = array();
　　$db-&gt;set&lt;span class=&quot;t_tag&quot;&gt;SQL&lt;/span&gt;($SQL1, &#039;CATEGORY&#039;);
　　if (!$db-&gt;query(&#039;CATEGORY&#039;)) die($db-&gt;error());
　　// 抓取第一层循环的资料
　　while ($item_category = $db-&gt;fetchAssoc(&#039;CATEGORY&#039;))
　　{
　　// 建立第二层数组
　　$topic = array();
　　$db-&gt;setSQL(sprintf($SQL2, $item_category[&#039;category_id&#039;]), &#039;TOPIC&#039;);
　　if (!$db-&gt;query(&#039;TOPIC&#039;)) die($db-&gt;error());
　　// 抓取第二层循环的资料
　　while ($item_topic = $db-&gt;fetchAssoc(&#039;TOPIC&#039;))
　　{
　　// 把抓取的数据推入第二层数组中
　　array_push($topic, $item_topic);
　　}
　　// 把第二层数组指定为第一层数组所抓取的数据中的一个成员
　　$item_category[&#039;topic&#039;] = $topic;
　　// 把第一层数据推入第一层数组中
　　array_push($category, $item_category);
　　}
　　$tpl-&gt;assign(&quot;forum&quot;, $category);
　　$tpl-&gt;display(&quot;test3.htm&quot;);
　　?&gt;
　　</pre>
<p>　　在数据库抓取一笔资料后，我们得到的是一个包含该笔数据的数组。透过 while 叙述及 array_push 函式，我们将数据库中的资料一笔一笔塞到数组里。如果您只用到单层循环，就把第二层循环 (红色的部份) 去掉即可。<br />
　　<br />
　　<strong>决定内容是否显示</strong><br />
　　<br />
　　要决定是否显示内容，我们可以使用 if 这个语法来做选择。例如如果使用者已经登入的话，我们的模版就可以这样写：<br />
　　<br />
　　&lt;{if $is_login == true}&gt;<br />
　　显示使用者操作选单<br />
　　&lt;{else}&gt;<br />
　　显示输入<span class="t_tag">帐号</span>和<span class="t_tag">密码</span>的窗体<br />
　　&lt;{/if}&gt;<br />
　　<br />
　　要注意的是，「==」号两边一定要各留至少一个空格符，否则 Smarty 会无法解析。<br />
　　<br />
　　if 语法一般的应用可以参照官方使用说明，所以笔者在这里就不详加介绍了。不过笔者发现了一个有趣的应用：常常会看到程序里要产生这样的一个表格： (数字代表的是资料集的顺序)<br />
　　<br />
　　1 2<br />
　　<br />
　　3 4<br />
　　<br />
　　5 6<br />
　　<br />
　　7 8<br />
　　<br />
　　这个笔者称之为「横向重复表格」。它的特色和传统的纵向重复不同，前几节我们看到的重复表格都是从上而下，一列只有一笔资料。而横向重复表格则可以横向地在一列中产生 n 笔资料后，再换下一列，直到整个循环结束。要达到这样的功能，最简单的方式只需要 section 和 if 搭配即可。<br />
　　<br />
　　我们来看看下面这个例子：<br />
　　<br />
　　test4.php:<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　require &quot;main.php&quot;;
　　$my_array = array(
　　array(&quot;value&quot; =&gt; &quot;0&quot;),
　　array(&quot;value&quot; =&gt; &quot;1&quot;),
　　array(&quot;value&quot; =&gt; &quot;2&quot;),
　　array(&quot;value&quot; =&gt; &quot;3&quot;),
　　array(&quot;value&quot; =&gt; &quot;4&quot;),
　　array(&quot;value&quot; =&gt; &quot;5&quot;),
　　array(&quot;value&quot; =&gt; &quot;6&quot;),
　　array(&quot;value&quot; =&gt; &quot;7&quot;),
　　array(&quot;value&quot; =&gt; &quot;8&quot;),
　　array(&quot;value&quot; =&gt; &quot;9&quot;));
　　$tpl-&gt;assign(&quot;my_array&quot;, $my_array);
　　$tpl-&gt;display(&#039;test4.htm&#039;);
　　?&gt;
　　</pre>
<p>　　模版的写法如下：<br />
　　<br />
　　templates/test4.htm:<br />
　　</p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">
　　&lt;html&gt;
　　&lt;head&gt;
　　&lt;title&gt;横向重复表格测试&lt;/title&gt;
　　&lt;/head&gt;
　　&lt;body&gt;
　　
&lt;table width=&quot;500&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;3&quot;&gt;
　　
&lt;tr&gt;
　　&lt;{section name=sec1 loop=$my_array}&gt;
　　
&lt;td&gt;&lt;{$my_array[sec1].value}&gt;&lt;/td&gt;
　　&lt;{if $smarty.section.sec1.rownum is div by 2}&gt;
　　&lt;/tr&gt;
　　
&lt;tr&gt;
　　&lt;{/if}&gt;
　　&lt;{/section}&gt;
　　&lt;/tr&gt;
　　&lt;/table&gt;
　　&lt;/body&gt;
　　&lt;/html&gt;
　　</pre>
<p>　　重点在于 $smarty.section.sec1.rownum 这个 Smarty 变量，在 section 循环中这个变量会取得从 1 开始的索引值，所以当 rownum 能被 2 除尽时，就输出 &lt;/tr&gt;&lt;tr&gt; 使表格换列 (注意！是 &lt;/tr&gt; 在前面&lt;tr&gt; 在后面) 。因此数字 2 就是我们在一列中想要呈现的资料笔数。各位可以由此去变化其它不同的呈现方式。<br />
　　<br />
　　<strong>加载外部内容</strong><br />
　　<br />
　　我们可以在模版内加载 PHP 程序<span class="t_tag">代码</span>或是另一个子模版，分别是使用 include_php 及 include 这两个 Smarty 模版语法； include_php 笔者较少用，使用方式可以查询官方手册，这里不再叙述。<br />
　　<br />
　　在使用 include 时，我们可以预先加载子模版，或是动态加载子模版。预先加载通常使用在有共同的<span class="t_tag">文件</span>标头及版权宣告；而动态加载则可以用在统一的框架页，而进一步达到如 Win<span class="t_tag">amp</span> 般可换 Skin 。当然这两种我们也可以混用，视状况而定。<br />
　　<br />
　　我们来看看下面这个例子：<br />
　　<br />
　　test5.php:<br />
　　</p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
　　&lt;?php
　　require &quot;main.php&quot;;
　　$tpl-&gt;assign(&quot;title&quot;, &quot;Include 测试&quot;);
　　$tpl-&gt;assign(&quot;content&quot;, &quot;这是模版 2 中的变量&quot;);
　　$tpl-&gt;assign(&quot;dyn_page&quot;, &quot;test5_3.htm&quot;);
　　$tpl-&gt;display(&#039;test5_1.htm&#039;);
　　?&gt;
　　</pre>
<p>　　模版 1 的写法如下：<br />
　　<br />
　　templates/test5_1.htm:<br />
　　</p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">
　　&lt;html&gt;
　　&lt;head&gt;
　　&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=big5&quot;&gt;
　　&lt;title&gt;&lt;{$title}&gt;&lt;/title&gt;
　　&lt;/head&gt;
　　&lt;body&gt;
　　&lt;{include file=&quot;test5_2.htm&quot;}&gt;
　　&lt;{include file=$dyn_page}&gt;
　　&lt;{include file=&quot;test5_4.htm&quot; custom_var=&quot;自订变量的内容&quot;}&gt;
　　&lt;/body&gt;
　　&lt;/html&gt;
　　</pre>
<p>　　模版 2 的写法如下：<br />
　　<br />
　　templates/test5_2.htm:<br />
　　<br />
　　&lt;{$content}&gt;<br />
　　模版 3 的写法如下：<br />
　　<br />
　　templates/test5_3.htm:<br />
　　<br />
　　这是模版 3 的内容<br />
　　模版 4 的写法如下：<br />
　　<br />
　　templates/test5_4.htm:<br />
　　<br />
　　&lt;{$custom_var}&gt;</p>
<p>　　这里注意几个重点：1. 模版的位置都是以先前定义的 template_dir 为基准；2. 所有 include 进来的子模版中，其变量也会被解译。；3. include 中可以用「变量名称=变量内容」来指定引含进来的模版中所包含的变量，如同上面模版 4 的做法。<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/455.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/04/akismet-150x150.jpg" alt="9个强大免费的PHP库" width="150" height="150" /></a><a href="https://coolshell.cn/articles/455.html" class="wp_rp_title">9个强大免费的PHP库</a></li><li ><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/07/muxnt-150x150.jpg" alt="代码执行的效率" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_title">代码执行的效率</a></li><li ><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/09/image008-150x150.jpg" alt="一些文章和各种资源" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_title">一些文章和各种资源</a></li><li ><a href="https://coolshell.cn/articles/5160.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/08/Pagination-e1312791884744-150x150.jpg" alt="PHP分页技术的代码和示例" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5160.html" class="wp_rp_title">PHP分页技术的代码和示例</a></li><li ><a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/7.jpg" alt="开源中最好的Web开发的资源" width="150" height="150" /></a><a href="https://coolshell.cn/articles/4795.html" class="wp_rp_title">开源中最好的Web开发的资源</a></li><li ><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/02/1128-150x150.jpg" alt="Web开发人员速查卡" width="150" height="150" /></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/559.html">菜鸟学PHP之Smarty入门</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/559.html/feed</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
		<item>
		<title>9个强大免费的PHP库</title>
		<link>https://coolshell.cn/articles/455.html</link>
					<comments>https://coolshell.cn/articles/455.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Sun, 12 Apr 2009 04:29:53 +0000</pubDate>
				<category><![CDATA[PHP脚本]]></category>
		<category><![CDATA[Web开发]]></category>
		<category><![CDATA[杂项资源]]></category>
		<category><![CDATA[编程语言]]></category>
		<category><![CDATA[Akismet]]></category>
		<category><![CDATA[Amazon S3]]></category>
		<category><![CDATA[JSON]]></category>
		<category><![CDATA[pChart]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[PHPMailer]]></category>
		<category><![CDATA[ReCAPTCHA]]></category>
		<category><![CDATA[SimplePie]]></category>
		<category><![CDATA[Smarty]]></category>
		<category><![CDATA[XML-RPC]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=455</guid>

					<description><![CDATA[<p>1. ReCAPTCHA reCAPTCHA  允许你的网站集成一个Advanced CAPTCHA 系统，这个系统可以帮助你阻止一些垃圾信息。可视化的CAPT...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/455.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/455.html">9个强大免费的PHP库</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script></p>
<h3>1. ReCAPTCHA</h3>
<p><a href="http://recaptcha.net/plugins/php/"><span style="color: #468175;">reCAPTCHA </span></a> 允许你的网站集成一个Advanced CAPTCHA 系统，这个系统可以帮助你阻止一些垃圾信息。可视化的CAPTCHA 同样也有一个有用的声音功能。另外，在reCAPTCHA 服务里，这个PHP库也包含了一个给 &#8220;Mailhide&#8221; 服务用的API，这个可以把你的邮件地址隐藏于一些抓邮件地址的程序。</p>
<p>这个API是免费并且非常容易使用的，你需要做的就是申请一个API的KEY。</p>
<div class="tutorial_image"><img decoding="async" style="width: 327px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/recaptcha.png" alt="ReCAPTCHA" /></div>
<p><a href="http://code.google.com/p/recaptcha/downloads/list?q=label:phplib-Latest"><span style="color: #468175;">下载 ReCAPTCHA</span></a> | <a href="http://recaptcha.net/api/getkey?app=php"><span style="color: #468175;">获取一个API Key</span></a> | <a href="http://recaptcha.net/plugins/php/"><span style="color: #468175;">相关文档</span></a></p>
<p><span id="more-455"></span></p>
<h3>2. Akismet</h3>
<p><a href="http://akismet.com/"><span style="color: #468175;">Akismet</span></a> 是一个免费的服务项目，对于一些小型的网站它是完全免费的，对于一些大型的网址，他是部分免费的。这个库也是提供了处理一些和垃圾信息相关的功能。它主要通过比对自己数据库中已存在的被认定为垃圾的信息，而做出决定的。当然，数据库中的垃圾信息可能通过各个网站举报，大家供享的。这是一个每天都在更新，每天都在改进的库。许多许多的WordPress都装有这个库。</p>
<div class="tutorial_image"><img decoding="async" style="width: 455px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/akismet.jpg" alt="Akismet" /></div>
<p><a href="http://net.tutsplus.com/tutorials/tools-and-tips/the-best-ways-to-fight-spam/"><span style="color: #468175;">实施Akismet</span></a></p>
<h3>3. Services_JSON</h3>
<p>JSON 是一个非常小巧敏捷的PHP库，它主要用于把一些数据格式转成易于人们阅读的格式。并不是所有的人都会喜欢PHP5 （因为自PHP5.20后其中已经集成了JSON），所以，这个小PHP库可以在低版本的PHP中让你得到 JSON 的功能。</p>
<div class="tutorial_image"><img decoding="async" style="width: 404px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/json.png" alt="JSON" /></div>
<p><a href="http://pear.php.net/package/Services_JSON"><span style="color: #468175;">查看 Services_JSON</span></a></p>
<h3>4. Smarty</h3>
<p><a href="http://smarty.net/"><span style="color: #468175;">Smarty</span></a> 是一个网面模板引擎，它主要是把程序和界面分开。Smarty 提供了许多强大的功能，比如循环，变量，以及一个强大的缓存系统。这个库不是一个新库了，其已经发展了很多年了，虽然只有3个release版，但应该是比较成熟了。</p>
<div class="tutorial_image"><img decoding="async" style="width: 257px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/smarty.png" alt="Smarty" /></div>
<p><a href="http://smarty.net/download.php"><span style="color: #468175;">下载 Smarty</span></a> | <a href="http://smarty.net/docs.php"><span style="color: #468175;">查看文档</span></a></p>
<h3>5. pChart</h3>
<p>这是一个强大的画统计图的PHP库，像一些饼图或是柱状图，<a href="http://pchart.sourceforge.net/index.php"><span style="color: #468175;">pChart</span></a> 还允许你通过SQL查询语句或是手动的输入数据来创建一个统计图。当然它需要GD库的支持以便创建图片。这个库一看就是有很多非常专业的美工设计过，因为它可以让你的统计图显示的相当漂亮。</p>
<div class="tutorial_image"><img decoding="async" style="width: 599px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/pchart.png" alt="pChart" /></div>
<p><a href="http://pchart.sourceforge.net/download.php"><span style="color: #468175;">下载 pChart</span></a> | <a href="http://pchart.sourceforge.net/documentation.php"><span style="color: #468175;">相关文档</span></a> | <a href="http://pchart.sourceforge.net/demo.php"><span style="color: #468175;">查看演示</span></a></p>
<h3>6. SimplePie</h3>
<p><a href="http://simplepie.org/"><span style="color: #468175;">SimplePie</span></a>  允许你可以容易地 pull 一些信息，比如RSS feeds。它同样可以被集成于不同的平台和语言。并且可以通过很多不同的方法来处理远端的feed。</p>
<p><img decoding="async" style="width: 449px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/simplepie.png" alt="SimplePie" /></p>
<p><a href="http://simplepie.org/downloads/"><span style="color: #468175;">下载 SimplePie</span></a> | <a href="http://simplepie.org/wiki/"><span style="color: #468175;">相关文档</span></a> | <a href="http://net.tutsplus.com/videos/screencasts/extending-simplepie-to-parse-unique-rss-feeds/"><span style="color: #468175;">Extending SimplePie to Parse Unique RSS Feeds</span></a></p>
<h3>7. XML-RPC PHP</h3>
<p>我们的应用程序有时需要一些类似于 &#8220;ping&#8221; 的功能去探测一下其它站点，如BLOG的 trackbacks。一般来说，这都是通过一个叫做XML-RPC的协议来完成的。<a href="http://phpxmlrpc.sourceforge.net/"><span style="color: #468175;">XML-RPC PHP</span></a> 库可以让你的站点集成这些功能。</p>
<p><img decoding="async" style="width: 231px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/xmlrpc.png" alt="XML-RPC" /></p>
<p><a href="http://phpxmlrpc.sourceforge.net/#download"><span style="color: #468175;">下载 XML-RPC PHP</span></a> | <a href="http://phpxmlrpc.sourceforge.net/#interest"><span style="color: #468175;">相关文档</span></a></p>
<h3>8. Amazon S3</h3>
<p>Amazon 提供了一个“云服务”叫&#8221;S3&#8243;. 这个PHP库可以让你不需要第三方的插件就可以上传大的文件。</p>
<div class="tutorial_image"><img decoding="async" style="width: 563px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/s3.png" alt="Amazon S3" /></div>
<p><a href="http://amazon-s3-php-class.googlecode.com/files/s3-php5-curl_0.3.9.tar.gz"><span style="color: #468175;">下载 Amazon S3 PHP 类</span></a></p>
<h3>9. PHPMailer</h3>
<p>很多应用都需要对外发送邮件，但是PHP的mail() 函数并不是特别好用。于是 PHPMailer 应运而生，这是一个功能强大的类，其允许你发送不同格式的邮件，并支持附件和自定义邮件头。</p>
<div class="tutorial_image"><img decoding="async" style="width: 245px;" src="http://nettuts.s3.amazonaws.com/267_libraries/libs/mail.png" alt="Sending Mail" /></div>
<p><a href="http://phpmailer.codeworxtech.com/index.php?pg=sf&amp;p=dl"><span style="color: #468175;">下载 PHPMailer</span></a> | <a href="http://phpmailer.codeworxtech.com/index.php?pg=tutorial"><span style="color: #468175;">相关文档</span></a></p>
<p>文章：<a href="http://net.tutsplus.com/articles/web-roundups/9-extremely-useful-and-free-php-libraries/" target="_blank">来源</a><!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" ><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/559.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/1.jpg" alt="菜鸟学PHP之Smarty入门" width="150" height="150" /></a><a href="https://coolshell.cn/articles/559.html" class="wp_rp_title">菜鸟学PHP之Smarty入门</a></li><li ><a href="https://coolshell.cn/articles/17737.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2017/03/Amazon-Web-Services-Down-150x150.png" alt="AWS 的 S3 故障回顾和思考" width="150" height="150" /></a><a href="https://coolshell.cn/articles/17737.html" class="wp_rp_title">AWS 的 S3 故障回顾和思考</a></li><li ><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2012/07/muxnt-150x150.jpg" alt="代码执行的效率" width="150" height="150" /></a><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_title">代码执行的效率</a></li><li ><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/09/image008-150x150.jpg" alt="一些文章和各种资源" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_title">一些文章和各种资源</a></li><li ><a href="https://coolshell.cn/articles/5160.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2011/08/Pagination-e1312791884744-150x150.jpg" alt="PHP分页技术的代码和示例" width="150" height="150" /></a><a href="https://coolshell.cn/articles/5160.html" class="wp_rp_title">PHP分页技术的代码和示例</a></li><li ><a href="https://coolshell.cn/articles/4905.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/3.jpg" alt="语言的数据亲和力" width="150" height="150" /></a><a href="https://coolshell.cn/articles/4905.html" class="wp_rp_title">语言的数据亲和力</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/455.html">9个强大免费的PHP库</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/455.html/feed</wfw:commentRss>
			<slash:comments>33</slash:comments>
		
		
			</item>
	</channel>
</rss>
