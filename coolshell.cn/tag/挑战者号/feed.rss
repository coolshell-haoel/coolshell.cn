<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>挑战者号 | 酷 壳 - CoolShell</title>
	<atom:link href="https://coolshell.cn/tag/%e6%8c%91%e6%88%98%e8%80%85%e5%8f%b7/feed" rel="self" type="application/rss+xml" />
	<link>https://coolshell.cn</link>
	<description>享受编程和技术所带来的快乐 - Coding Your Ambition</description>
	<lastBuildDate>Wed, 04 Nov 2009 14:25:55 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Richard Feynman, 挑战者号, 软件工程</title>
		<link>https://coolshell.cn/articles/1654.html</link>
					<comments>https://coolshell.cn/articles/1654.html#comments</comments>
		
		<dc:creator><![CDATA[陈皓]]></dc:creator>
		<pubDate>Wed, 04 Nov 2009 08:49:30 +0000</pubDate>
				<category><![CDATA[技术读物]]></category>
		<category><![CDATA[流程方法]]></category>
		<category><![CDATA[程序设计]]></category>
		<category><![CDATA[Richard Feynman]]></category>
		<category><![CDATA[挑战者号]]></category>
		<category><![CDATA[软件开发]]></category>
		<guid isPermaLink="false">http://coolshell.cn/?p=1654</guid>

					<description><![CDATA[<p>源文：链接  （本文主要根据挑战者号的问题，以及Richard Feynman那对NASA严厉的批评报告，批评了不适当的“自顶向下”的设计方法，并总结了一下软件...</p>
<p class="read-more"><a class="btn btn-default" href="https://coolshell.cn/articles/1654.html"> Read More<span class="screen-reader-text">  Read More</span></a></p>
The post <a href="https://coolshell.cn/articles/1654.html">Richard Feynman, 挑战者号, 软件工程</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></description>
										<content:encoded><![CDATA[<p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3415450859608158"
     crossorigin="anonymous"></script></p>
<p style="TEXT-ALIGN: left">源文：<a href="http://duartes.org/gustavo/blog/post/richard-feynman-challenger-disaster-software-engineering" target="_blank">链接</a>  （本文主要根据挑战者号的问题，以及Richard Feynman那对NASA严厉的批评报告，批评了不适当的“自顶向下”的设计方法，并总结了一下软件工程和其它工程的相通的一些观点。翻译水平有限，欢迎指正）</p>
<p align="center"><img decoding="async" loading="lazy" src="http://static.duartes.org/img/blogPosts/250px-ChallengerCrew.jpg" alt="Challenger Crew" width="250" height="200" /></p>
<p>佛罗里达州，美国东部时间1986年1月28日上午11时39分，<a href="http://zh.wikipedia.org/wiki/%E6%8C%91%E6%88%98%E8%80%85%E5%8F%B7%E8%88%AA%E5%A4%A9%E9%A3%9E%E6%9C%BA%E7%81%BE%E9%9A%BE">挑战者号航天飞机</a> 执行为期6天的<a href="http://en.wikipedia.org/wiki/STS-51-L">STS-51-L 任务</a>，在发射后，其右侧固体火箭助推器（SRB &#8211; <a href="http://en.wikipedia.org/wiki/Space_Shuttle_Solid_Rocket_Booster">Solid Rocket Booster</a>）的O型环密封圈（用于连接两节助推器）失效，泄漏出来的热汽达到了5000华氏度，直接蒸发了O型密封圈，并灼烧了毗邻的外部燃料舱，在几秒钟内，外部燃料舱出现结构连接失效，空气的动力迅速分解了航天飞机。在而航天飞机上升72秒以后，助推器脱落，导致航天发飞向侧面滑出。几乎在引航员 Michael J. Smith 发出&#8221;Uh oh&#8221; 的同时，整个航天飞机完全解体，片刻，航天飞机内部发生爆炸，所有7名宇航员罹难。 那时的我还只是一个小孩，我从电视下方滚动的新闻条目知道了这一惨剧。</p>
<p>在那个时候，火箭助推器工程师曾经警告过这个O型环可能存在问题，但可惜的是，NASA的管理层忽略了这个问题。<img decoding="async" loading="lazy" style="MARGIN: 6px" src="http://static.duartes.org/img/blogPosts/ChallengerExplosion.jpg" alt="Challenger Explosion" width="300" height="191" align="right" />美国总统里根委派<a href="http://en.wikipedia.org/wiki/Rogers_Commission" target="_blank">罗杰斯委员会</a>对事故进行了调查，调查成员包括著名的物理学家Richard Feynman。其不羁的态度和直来直去的方法和罗杰斯委员会的风格形成了鲜明的反差。主席罗杰斯，一个政客，评论Feynman是一个“真正的痛苦”。最后，在委员会提交的报告中，Feynman反判的观点几乎被清除了出去。并且，Feynman曾被主席威胁过要把他的名字从报告中完全除掉，但最终，他们还是同意在报告中加一个附录，但只是个人观点—— <a href="http://www.ralentz.com/old/space/feynman-report.html">Appendix F &#8211; Personal Observations on Reliability of Shuttle</a>。</p>
<p><span id="more-1654"></span></p>
<p>这是一个好的报告，因为，这是一个富有才华的报告。其深深地洞察了在实现一些高可靠性的系统时的工程学中的一些很自然性的东西。是的，在这里，我并没有放上“软件工程” 的字样，只是工程。但Feynman的结论却非常和我们的软件开发有着不可分割的关系。这是最基本的东西，无论是软件工程，还是别的工程学。下面，让我们来看看，Feynman是怎么说的：</p>
<blockquote><p>航天飞机主引擎的建造方式是<a href="http://en.wikipedia.org/wiki/Top-down"><strong>自顶向下</strong></a>(top down)，我们可以这样说。整个引擎被设计把所有的事情放在一起，而那些相关的细节上的东西在设计当时还并不是很成熟的。所以，<strong>当其中的小零件（轴承，涡轮片，散热管，等等）出现问题时</strong>，<strong>我们需要花费昂贵的代价才能找到事故的原因，也很难作出修改</strong>。要避免问题发生，需要频繁的维护和置换重要的零部件。修理很多时候不会解决真正的原因。</p></blockquote>
<p>可见，软件开发中也一样，Bug在整个过程中存在的时间越长， <a href="http://stevemcconnell.com/ieeesoftware/eic17.htm">我们就越难解决这个问题</a>。很显然，自顶向下的方法，因为在设计的时候并不熟悉实际问题，所以，Bug从设计的时候就出现了。然而，我们需要明白，需求和设计的不同之处。需求需要对产品一种清楚和良好的定义，设计则是解决如何达到需求的方法。Feynman 在这里并没有反对 <a href="http://www.joelonsoftware.com/articles/fog0000000036.html">功能规格说明书</a>，他只是反对自顶向下的设计方法，比如： <a href="http://martinfowler.com/bliki/UmlAsBlueprint.html">UML 就是蓝图</a> 的鼓吹者。再来看看他的言论：</p>
<blockquote><p>航天飞机主引擎是一个非常不同寻常的机器，它和以前所有的引擎都不一样。这完全超出了以前引擎制的工程经验。所以，不奇怪的，许多不同的流程和难点都会在工程中出现。<strong>然而，很不幸地，这是通过自顶向下设计，所以，那些流程和问题是很难被发现被修正的</strong>。设计要求的引擎寿命可以完成55次点火任务（相当于27,000秒的操作，也就是说，第次点火需要500秒），但事实上这并没有完成。而引擎现在则<strong>需要频繁维护，并需要经常更换重要的部件</strong>，比如：涡轮泵，轴承，金属片，等等。</p></blockquote>
<p align="center"><img decoding="async" loading="lazy" style="MARGIN: 4px" src="http://static.duartes.org/img/blogPosts/feynman.jpg" alt="Richard Feynman" hspace="hspace" vspace="vspace" width="200" height="248" /></p>
<p>“不合适的自顶向下的设计方式，导致了问题很难去发现和修正，最终没有完成设计需求，频繁性地维护”这些描述方式，听起来是不是似曾相识？我们每天在做的软件工程和这个不一样吗？Feynman 详细说明了为什么“自顶向下”的设计会让发现和解决这些问题成为那么的难和痛苦的一件事：</p>
<blockquote><p>很多这些已被解决的问题在一开始设计时都是设计的难点。很自然地，没有人可以确定那些所有的已发现问题都能会出现，而其中一些，<strong>我们并没有根据正确的原因在正确的地方解决这些问题</strong>。</p></blockquote>
<p>无论这是Linux内核，或是航天飞机引擎，这些设计时的基本的问题都是相通的。而“自顶向下”是其中荒唐的一个，因为，自顶向下，过度的注重了需求而忽略了现实，而那些下面非常细节的知识绝对是非常需要的，并不是所有的东西都可以抽象成出来。在他说起航空电子系统时（一个NASA的另一个部门）：</p>
<blockquote><p>该软件是采用了从底向上的方法被小心地做了检查。<strong>首先，每一行代码都被检查过，然后，代码段和模块和一些详细的功能被验证过</strong>。而检查范围在一步一步地被扩大，直到新的改变被组合进来最终成为一个完整的系统。这个过程最终的完整的输出成为了最终的产品，成为了新的release。这个部门完全以一种中立的态度，<strong>把软件作为一个敌对方</strong>，不停地测试，校验，就像自己就是这个软件的用户一样。</p></blockquote>
<p>是的，这就是1986年Feynman告诉大家的——Unit Test（单元测试），今天，Unit Test成为了软件开发活动中最最重要的一个环节（也许你以为是Coding）。并不单单只是Unit Test，“步步为营的增量式”和“以敌对的态度”，都是值得我们所学习的。我们经常听到有人在抱怨软件道，因为软件工程还太年轻了，还有很多知识我们还没有得到，所以总是那么多问题。这完全是胡说！我们痛苦是因为，我们 <a href="http://www.stevemcconnell.com/cc.htm">总是忽略</a> 早就确定了的， <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">早为人所熟知</a>， <a href="http://www.stevemcconnell.com/rd.htm">以经历和实践去证明一切的方法</a>。 当然，在这方面，我们的管理层也需要负责，尤其是那些紊乱的时间进度，错误的激励机制，低档次的招聘，和一些让士气受挫的制度，等等。“管理”和“工程”间的紧张关系最终成为了糟糕的管理。Feynman在他的报告中也谈到了这点，下面其中的一小段话：</p>
<blockquote><p>总而言之，计算机软件检查系统和<strong>最负责的态度</strong>。是的，那里并没有那种自欺欺人而不顾固体燃料助推器的标准。但可以肯定的是，有关管理部门<strong>最新的建议，建议取消此类复杂而昂贵的不必要的测试</strong>。</p></blockquote>
<p>这只是其中的一个小段。我把其挑出来是因为其一针见血地指出了观点，比如“最负责的态度”，以及“逐步的自欺欺人”。我建议你读一读<a href="http://www.ralentz.com/old/space/feynman-report.html">报告全文</a>， 可以让你得到很多真相。关于软件工程，下面是几个主要观点：</p>
<ul>
<li>工程仅当在和其管理有好的关系的时候才能好。</li>
<li>大型的从上从前端的设计是愚蠢的。</li>
<li>软件工程和其它传统的工程学是一样的。</li>
<li>可靠的系统由几近残酷的测试，增量式的自底向上的工程，以及高负责的态度来共同保证。</li>
</ul>
<p>这篇报告中，还有很多不错的观点，如果你感受到了，欢迎你告诉我。</p>
<p>（全文完）<!--



<p align="center"><a href= target=_blank><img decoding="async" src=""></a></p>





<p align="center"><img decoding="async" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.weixin.jpg"> <img decoding="async" loading="lazy" src="https://coolshell.cn/wp-content/uploads/2020/03/coolshell.mini_.jpg" width="300" height="300"> <br />关注CoolShell微信公众账号和微信小程序</p>

 

--></p>
<div style="margin-top: 15px; font-size: 16px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 &#8211; CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>

<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content"><h3 class="related_post_title">相关文章</h3><ul class="related_post wp_rp"><li ><a href="https://coolshell.cn/articles/2681.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/5.jpg" alt="Kent Beck 谈单元测试和持续部署" width="150" height="150" /></a><a href="https://coolshell.cn/articles/2681.html" class="wp_rp_title">Kent Beck 谈单元测试和持续部署</a></li><li ><a href="https://coolshell.cn/articles/2539.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/1.jpg" alt="参透软件开发的本质 &#8211; Uncle Bob Martin 推荐的经典书籍" width="150" height="150" /></a><a href="https://coolshell.cn/articles/2539.html" class="wp_rp_title">参透软件开发的本质 &#8211; Uncle Bob Martin 推荐的经典书籍</a></li><li ><a href="https://coolshell.cn/articles/76.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/03/09meeting-thumbnail-150x150.jpg" alt="怎样做一个 Program Manager" width="150" height="150" /></a><a href="https://coolshell.cn/articles/76.html" class="wp_rp_title">怎样做一个 Program Manager</a></li><li ><a href="https://coolshell.cn/articles/968.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/uploads/2009/06/visual_web_developer-150x150.jpg" alt="18个Web开发的IDE" width="150" height="150" /></a><a href="https://coolshell.cn/articles/968.html" class="wp_rp_title">18个Web开发的IDE</a></li><li ><a href="https://coolshell.cn/articles/2667.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/28.jpg" alt="浏览器正则表达式检查插件" width="150" height="150" /></a><a href="https://coolshell.cn/articles/2667.html" class="wp_rp_title">浏览器正则表达式检查插件</a></li><li ><a href="https://coolshell.cn/articles/776.html" class="wp_rp_thumbnail"><img src="https://coolshell.cn/wp-content/plugins/wordpress-23-related-posts-plugin/static/thumbs/22.jpg" alt="一个在线的画UML图的网站" width="150" height="150" /></a><a href="https://coolshell.cn/articles/776.html" class="wp_rp_title">一个在线的画UML图的网站</a></li></ul></div></div>The post <a href="https://coolshell.cn/articles/1654.html">Richard Feynman, 挑战者号, 软件工程</a> first appeared on <a href="https://coolshell.cn">酷 壳 - CoolShell</a>.]]></content:encoded>
					
					<wfw:commentRss>https://coolshell.cn/articles/1654.html/feed</wfw:commentRss>
			<slash:comments>14</slash:comments>
		
		
			</item>
	</channel>
</rss>
