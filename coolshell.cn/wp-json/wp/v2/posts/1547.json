{"id":1547,"date":"2009-10-12T12:47:18","date_gmt":"2009-10-12T04:47:18","guid":{"rendered":"http:\/\/coolshell.cn\/?p=1547"},"modified":"2009-10-13T08:54:50","modified_gmt":"2009-10-13T00:54:50","slug":"%e4%bd%bf%e7%94%a8flexbisonllvm%e7%bc%96%e5%86%99%e4%bd%a0%e8%87%aa%e5%b7%b1%e7%9a%84%e7%bc%96%e8%af%91%e5%99%a8","status":"publish","type":"post","link":"https:\/\/coolshell.cn\/articles\/1547.html","title":{"rendered":"\u4f7f\u7528Flex Bison \u548cLLVM\u7f16\u5199\u81ea\u5df1\u7684\u7f16\u8bd1\u5668"},"content":{"rendered":"<p><strong>\u4f7f\u7528Flex Bison \u548c LLVM\u7f16\u5199\u4f60\u81ea\u5df1\u7684\u7f16\u8bd1\u5668<\/strong><br \/>\n\u539f\u6587\u51fa\u5904\uff1a<a href=\"http:\/\/gnuu.org\/2009\/09\/18\/writing-your-own-toy-compiler\/\">http:\/\/gnuu.org\/2009\/09\/18\/writing-your-own-toy-compiler<\/a><\/p>\n<h2> 1\u3001\u4ecb\u7ecd<\/h2>\n<p>\u6211\u603b\u662f\u5bf9\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u975e\u5e38\u611f\u5174\u8da3\uff0c\u4f46\u662f\u5174\u8da3\u5e76\u4e0d\u4f1a\u8ba9\u4f60\u8d70\u7684\u66f4\u8fdc\u3002\u5927\u91cf\u7684\u7f16\u8bd1\u5668\u7684\u8bbe\u8ba1\u6982\u5ff5\u53ef\u4ee5\u641e\u7684\u4efb\u4f55\u4e00\u4e2a\u7a0b\u5e8f\u5458\u8ff7\u5931\u5728\u8fd9\u4e9b\u6982\u5ff5\u4e4b\u4e2d\u3002\u4e0d\u7528\u8bf4\uff0c\u6211\u4e5f\u66fe\u4eca\u5c1d\u8bd5\u8fc7\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u53d6\u5f97\u592a\u5927\u7684\u6210\u529f\uff0c\u6211\u4ee5\u524d\u7684\u5c1d\u8bd5\u90fd\u505c\u7559\u5728\u8bed\u4e49\u5206\u6790\u9636\u6bb5\u3002\u672c\u6587\u7684\u7075\u611f\u4e3b\u8981\u6765\u6e90\u4e8e\u6211\u6700\u8fd1\u4e00\u6b21\u7684\u5c1d\u8bd5\uff0c\u5e76\u4e14\u5728\u8fd9\u4e00\u6b21\u4e2d\u6211\u53d6\u5f97\u4e00\u70b9\u6210\u5c31\u3002<\/p>\n<p>\u5e78\u8fd0\u7684\u662f\uff0c\u6700\u8fd1\u7684\u51e0\u5e74\uff0c\u6211\u53c2\u52a0\u4e86\u4e00\u4e9b\u9879\u76ee\uff0c\u8fd9\u4e9b\u9879\u76ee\u7ed9\u4e86\u6211\u5728\u5efa\u7acb\u7f16\u8bd1\u5668\u4e0a\u5f88\u591a\u6709\u7528\u7684\u7ecf\u9a8c\u548c\u89c2\u70b9\u3002\u53e6\u5916\u4e00\u4ef6\u4e8b\u662f\uff0c\u6211\u975e\u5e38\u5e78\u8fd0\u5f97\u5230<a href=\"http:\/\/llvm.org\/\">LLVM<\/a>\u7684\u5e2e\u52a9\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u5de5\u5177\uff0c\u6211\u4e0d\u77e5\u9053\u6539\u600e\u4e48\u53bb\u5f62\u5bb9\u5b83\uff0c\u4f46\u662f\u4ed6\u7ed9\u6211\u7684\u8fd9\u4e2a\u7f16\u8bd1\u5668\u7684\u786e\u5e26\u6765\u975e\u5e38\u5927\u7684\u5e2e\u52a9\u3002<br \/>\n<!--more--><\/p>\n<h3>1.1\u3001\u4f60\u4e3a\u4ec0\u4e48\u8981\u9605\u8bfb\u672c\u6587<\/h3>\n<p>\u4f60\u4e5f\u8bb8\u60f3\u770b\u770b\u6211\u6b63\u5728\u505a\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\u66f4\u6709\u53ef\u80fd\u7684\u662f\uff0c\u4f60\u4e5f\u662f\u548c\u6211\u4e00\u6837\u5bf9\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u975e\u5e38\u611f\u5174\u8da3\uff0c\u5e76\u4e14\u4e5f\u53ef\u80fd\u9047\u5230\u4e86\u4e00\u4e9b\u5728\u63a2\u7d22\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e86\u4e00\u4e9b\u96be\u9898\uff0c\u4f60\u53ef\u80fd\u6b63\u6253\u7b97\u89e3\u51b3\u8fd9\u4e9b\u96be\u9898\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u53d1\u73b0\u597d\u7684\u8d44\u6e90\u3002\u672c\u6587\u7684\u76ee\u6807\u5c31\u662f\u63d0\u4f9b\u8fd9\u4e9b\u8d44\u6e90\uff0c\u5e76\u4ee5\u4e00\u79cd\u624b\u628a\u624b\u7684\u65b9\u5f0f\u6559\u4f60\u4ece\u5934\u5230\u5c3e\u7684\u53bb\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u57fa\u672c\u529f\u80fd\u7684\u8bed\u8a00\u7f16\u8bd1\u5668\u3002<\/p>\n<p>\u5728\u672c\u6587\uff0c\u6211\u4e0d\u4f1a\u53bb\u89e3\u91ca\u4e00\u4e9b\u7f16\u8bd1\u5668\u57fa\u672c\u7406\u8bba\uff0c\u6240\u4ee5\u4f60\u8981\u5728\u5f00\u59cb\u672c\u6587\u524d\u53bb\u4e86\u89e3\u4ec0\u4e48\u662f<a href=\"http:\/\/en.wikipedia.org\/wiki\/Backus%E2%80%93Naur_Form\">BNF\u8bed\u6cd5<\/a>\uff0c\u4ec0\u4e48\u662f<a href=\"http:\/\/en.wikipedia.org\/wiki\/Abstract_syntax_tree\">\u62bd\u8c61\u8bed\u6cd5\u6811\u6570\u636e\u7ed3\u6784 AST data structure<\/a>\uff0c\u4ec0\u4e48\u662f\u57fa\u7840<a href=\"http:\/\/en.wikipedia.org\/wiki\/Compiler\">\u7f16\u8bd1\u5668\u6d41\u6c34\u7ebf complier pipline<\/a>\u3002\u5c31\u662f\u8bf4\uff0c\u6211\u4f1a\u628a\u672c\u6587\u63cf\u8ff0\u7684\u5c3d\u91cf\u7b80\u5355\u3002\u672c\u6587\u7684\u76ee\u7684\u5c31\u662f\u4ee5\u4e00\u79cd\u7b80\u5355\u6613\u61c2\u7684\u65b9\u5f0f\u6765\u4ecb\u7ecd\u76f8\u5173\u7f16\u8bd1\u5668\u8d44\u6e90\u7684\u65b9\u5f0f\u6765\u5e2e\u52a9\u90a3\u4e9b\u4ece\u6765\u6ca1\u6709\u7f16\u8bd1\u5668\u7ecf\u9a8c\u7684\u4eba\u3002<\/p>\n<h3>1.2\u3001\u8fbe\u5230\u7684\u6210\u679c<\/h3>\n<p>\u5982\u679c\u4f60\u6839\u636e\u6587\u7ae0\u5185\u5bb9\u4e00\u6b65\u6b65\u6765\uff0c\u4f60\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u80fd\u5b9a\u4e49\u51fd\u6570\uff0c\u8c03\u7528\u51fd\u6570\uff0c\u5b9a\u4e49\u53d8\u91cf\uff0c\u7ed9\u53d8\u91cf\u8d4b\u503c\u6267\u884c\u57fa\u672c\u6570\u5b66\u64cd\u4f5c\u7684\u8bed\u8a00\u3002\u8fd9\u95e8\u8bed\u8a00\u652f\u6301\u4e24\u79cd\u57fa\u672c\u7c7b\u578b\uff0cdouble\u548cinteger\u7c7b\u578b\u3002\u8fd8\u6709\u4e00\u4e9b\u529f\u80fd\u8fd8\u672a\u5b9e\u73b0\uff0c\u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u81ea\u5df1\u53bb\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\u5f97\u5230\u4f60\u6ee1\u610f\u7684\u529f\u80fd\u5e76\u4e14\u80fd\u4e3a\u4f60\u7406\u89e3\u7f16\u5199\u4e00\u4e2a\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e0d\u5c11\u7684\u5e2e\u52a9\u3002<\/p>\n<p><h3>1.3 \u95ee\u9898\u89e3\u7b54<\/h3>\n<\/p>\n<h4>1.3.1 \u6211\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u6837\u7684\u8bed\u8a00<\/h4>\n<p>\u6211\u4eec\u4f7f\u7528\u7684\u5de5\u5177\u662f\u57fa\u4e8eC\/C++\u7684\u3002LLVM\u662f\u57fa\u4e8eC++\u7684\uff0c\u6211\u4eec\u7684\u8fd9\u4e2a\u8bed\u8a00\u4e5f\u57fa\u4e8eC++\uff0c\u56e0\u4e3aC++\u5177\u6709\u5f88\u591a\u9762\u5411\u5bf9\u8c61\u7684\u4f18\u70b9\u548c\u53ef\u4ee5\u88ab\u91cd\u7528\u7684STL\u3002\u6b64\u5916\u5bf9\u4e8eC\uff0cLex\u548cBison\u90fd\u5177\u6709\u90a3\u4e9b\u521d\u770b\u8d77\u6765\u4ee4\u4eba\u8ff7\u60d1\u7684\u8bed\u6cd5\uff0c\u4f46\u662f\u6211\u5c06\u5c3d\u53ef\u80fd\u7684\u53bb\u89e3\u91ca\u4ed6\u3002\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u8bed\u6cd5\u975e\u5e38\u5c0f\uff0c\u6700\u591a\u5c31100\u884c\uff0c\u56e0\u6b64\u5b83\u662f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u7684\u3002<\/p>\n<h4>1.3.2 \u5f88\u590d\u6742\u5417\uff1f<\/h4>\n<p>\u662f\u6216\u5426\uff0c\u8fd9\u91cc\u9762\u6709\u5f88\u591a\u7684\u4e1c\u897f\u4f60\u9700\u8981\u4e86\u89e3\uff0c\u751a\u81f3\u591a\u7684\u8ba9\u4eba\u611f\u89c9\u5230\u5bb3\u6015\uff0c\u4f46\u662f\u8001\u5b9e\u8bf4\uff0c\u5176\u5b9e\u8fd9\u4e9b\u90fd\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u540c\u6837\u4f1a\u4f7f\u7528\u5f88\u591a\u5de5\u5177\u5206\u89e3\u8fd9\u4e9b\u5c42\u6b21\u7684\u590d\u6742\u6027\uff0c\u5e76\u4f7f\u5f97\u8fd9\u4e9b\u5185\u5bb9\u53ef\u7ba1\u7406\u3002<\/p>\n<h4>1.3.3 \u5b8c\u6210\u5b83\u9700\u8981\u591a\u957f\u65f6\u95f4<\/h4>\n<p>\u6211\u4eec\u5c06\u8981\u5b8c\u6210\u7684\u7f16\u8bd1\u5668\u82b1\u4e86\u6211\u4e09\u5929\u7684\u65f6\u95f4\u3002\u4f46\u662f\u5982\u679c\u4f60\u6309\u201cfollow me\u201d\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u8fd9\u4e2a\u7f16\u8bd1\u5668\u7684\u8bdd\uff0c\u4f60\u5c06\u4f1a\u82b1\u8d39\u66f4\u5c11\u7684\u65f6\u95f4\u3002\u5982\u679c\u8981\u5168\u90e8\u7406\u89e3\u8fd9\u91cc\u9762\u7684\u5185\u5bb9\u53ef\u80fd\u4f1a\u82b1\u53bb\u7a0d\u5fae\u957f\u4e00\u70b9\u7684\u65f6\u95f4\uff0c\u4f46\u662f\u4f60\u81f3\u5c11\u5e94\u8be5\u5728\u4e00\u4e2a\u4e0b\u5348\u5c31\u5c06\u6574\u4e2a\u7f16\u8bd1\u5668\u8fd0\u884c\u8d77\u6765\u3002<\/p>\n<p>\u597d\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u6211\u4eec\u5f00\u59cb\u5427\u3002<\/p>\n<p><h2>2\u3001\u51c6\u5907\u5f00\u59cb<\/h2>\n<\/p>\n<h3>2.1 \u6784\u6210\u7f16\u8bd1\u5668\u7684\u6700\u57fa\u672c\u7684\u8981\u7d20<\/h3>\n<p>\u4e00\u4e2a\u7f16\u8bd1\u5668\u662f\u7531\u4e00\u7ec4\u6709\u4e09\u4e2a\u5230\u56db\u4e2a\u7ec4\u4ef6(\u8fd8\u6709\u4e00\u4e9b\u5b50\u7ec4\u4ef6)\u6784\u6210\uff0c\u6570\u636e\u4ee5\u7ba1\u9053\u7684\u65b9\u5f0f\u4ece\u4e00\u4e2a\u7ec4\u4ef6\u8f93\u5165\u5e76\u6d41\u5411\u4e0b\u4e00\u4e2a\u7ec4\u4ef6\u3002\u5728\u6211\u4eec\u8fd9\u4e2a\u7f16\u8bd1\u5668\u4e2d\uff0c\u53ef\u80fd\u4f1a\u7528\u5230\u4e00\u4e9b\u7a0d\u5fae\u4e0d\u540c\u7684\u5de5\u5177\u3002\u4e0b\u9762\u8fd9\u4e2a\u56fe\u5c55\u793a\u4e86\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u7f16\u8bd1\u5668\u7684\u6b65\u9aa4\uff0c\u548c\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u5c06\u4f7f\u7528\u7684\u5de5\u5177\u3002<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Compiler Pipeline\" src=\"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png\" width=\"620\" height=\"76\" \/> <\/p>\n<p>\u4ece\u4e0a\u56fe\u4f60\u53ef\u4ee5\u770b\u5230\u5728Linking\u8fd9\u4e00\u6b65\u662f\u7070\u6389\u7684\u3002\u6211\u4eec\u7684\u8bed\u8a00\u5c06\u4e0d\u652f\u6301\u7f16\u8bd1\u5668\u7684\u8fde\u63a5(\u5f88\u591a\u7684\u8bed\u8a00\u90fd\u4e0d\u652f\u6301\u7f16\u8bd1\u5668\u7684\u8fde\u63a5)\u3002\u5728\u6587\u6cd5\u5206\u6790\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5f00\u6e90\u5de5\u5177Lex\uff0c\u5373\u5982\u4eca\u7684<a href=\"http:\/\/flex.sourceforge.net\/\">Flex<\/a>\uff0c\u6587\u6cd5\u5206\u6790\u4e00\u822c\u90fd\u4f34\u968f\u8005\u8bed\u6cd5\u5206\u6790\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u8bed\u6cd5\u5206\u6790\u5de5\u5177\u5c06\u4f1a\u662fYacc\uff0c\u6216\u8005\u8bf4\u662f<a href=\"http:\/\/www.gnu.org\/software\/bison\/\">Bison<\/a>\uff0c\u6700\u540e\u4e00\u65e6\u8bed\u4e49\u5206\u6790\u5b8c\u6210\uff0c\u6211\u4eec\u5c06\u904d\u5386\u6211\u4eec\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u5e76\u751f\u6210\u6211\u4eec\u7684&#8221;bytecode \u5b57\u8282\u7801&#8221;\uff0c\u6216&#8221;\u673a\u5668\u7801 matchine code&#8221;\u3002\u505a\u8fd9\u4e00\u6b65\uff0c\u6211\u4eec\u5c06\u4f7f\u7528<a href=\"http:\/\/llvm.org\/\">LLVM<\/a>\uff0c\u5b83\u80fd\u751f\u6210\u5feb\u901f\u5b57\u8282\u7801\uff0c\u6211\u4eec\u5c06\u4f7f\u7528LLVM\u7684JIT(Just In Tinme)\u6765\u5728\u6211\u4eec\u7684\u673a\u5668\u4e0a\u7f16\u8bd1\u6267\u884c\u5b83<\/p>\n<p>\u603b\u7ed3\u4e00\u4e0b\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a<\/p>\n<ol>\n<li><strong>\u6587\u6cd5\u5206\u6790\u7528<em>Flex<\/em><\/strong>:\u5c06\u6570\u636e\u5206\u9694\u6210\u4e00\u4e2a\u4e2a\u7684\u6807\u8bb0token (\u6807\u793a\u7b26identifiers\uff0c\u5173\u952e\u5b57keywords\uff0c\u6570\u5b57numbers, \u4e2d\u62ec\u53f7brackets, \u5927\u62ec\u53f7braces, \u7b49\u7b49etc.) <\/li>\n<li><strong>\u8bed\u6cd5\u5206\u6790\u7528<em>Bison<\/em><\/strong>: \u5728\u5206\u6790\u6807\u8bb0\u7684\u65f6\u5019\u751f\u6210\u62bd\u8c61\u8bed\u6cd5\u6811. Bison \u5c06\u4f1a\u505a\u6389\u51e0\u4e4e\u6240\u6709\u7684\u8fd9\u4e9b\u5de5\u4f5c, \u6211\u4eec\u5b9a\u4e49\u597d\u6211\u4eec\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u5c31OK\u4e86. <\/li>\n<li><strong>\u7ec4\u88c5\u7528<em>LLVM<\/em><\/strong>: \u8fd9\u91cc\u6211\u4eec\u5c06\u904d\u5386\u6211\u4eec\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u5e76\u672a\u6bcf\u4e00\u4e2a\u8282\u70b9\u751f\u6210\u5b57\u8282\/\u673a\u5668\u7801\u3002 \u8fd9\u542c\u8d77\u6765\u4f3c\u4e4e\u5f88\u75af\u72c2\uff0c\u4f46\u662f\u8fd9\u51e0\u4e4e\u5c31\u662f<em>\u6700\u7b80\u5355\u7684<\/em> \u4e00\u6b65\u4e86. <\/li>\n<\/ol>\n<p>\u5728\u6211\u4eec\u5f00\u59cb\u4e0b\u4e00\u6b65\u4e4b\u524d\uff0c\u4f60\u5e94\u8be5\u51c6\u5907\u5b89\u88c5\u597dFlex,Bison\u548cLLVM\u3002\u56e0\u4e3a\u6211\u4eec\u9a6c\u4e0a\u5c31\u8981\u4f7f\u7528\u5230\u5b83\u4eec\u3002<\/p>\n<p><h3>2.2 \u5b9a\u4e49\u6211\u4eec\u7684\u8bed\u6cd5<\/h3>\n<\/p>\n<p>\u6211\u4eec\u8bed\u6cd5\u662f\u6211\u4eec\u8bed\u8a00\u4e2d\u6700\u6838\u5fc3\u7684\u90e8\u5206\uff0c\u6211\u4eec\u7684\u8bed\u6cd5\u4f7f\u7528\u7c7b\u4f3c\u6807\u51c6C\u7684\u8bed\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bed\u6cd5\u975e\u5e38\u719f\u6089\uff0c\u800c\u4e14\u7b80\u5355\u3002\u6211\u4eec\u8bed\u6cd5\u7684\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u5982\u4e0b\uff1a<\/p>\n<pre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\">\r\nint do_math(int a) {\r\n  int x = a * 5 + 3\r\n}\r\n\r\ndo_math(10)\r\n<\/pre>\n<p>\u770b\u8d77\u6765\u5f88\u7b80\u5355\u3002\u5b83\u548cC\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u5b83\u6ca1\u6709\u4f7f\u7528\u5206\u53f7\u505a\u8bed\u53e5\u7684\u5206\u9694\uff0c\u540c\u65f6\u4f60\u4e5f\u4f1a\u6ce8\u610f\u5230\u6211\u4eec\u7684\u8bed\u6cd5\u4e2d\u6ca1\u6709return\u8bed\u53e5\u3002\u8fd9\u5c31\u662f\u4f60\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u7684\u90e8\u5206\u3002<\/p>\n<p>\u73b0\u5728\u6211\u4eec\u8fd8\u6ca1\u6709\u4efb\u4f55\u673a\u5236\u6765\u9a8c\u8bc1\u7ed3\u679c\u3002\u6211\u4eec\u5c06\u901a\u8fc7\u68c0\u67e5\u6211\u4eec\u7f16\u8bd1\u4e4b\u540eLLVM\u6253\u5370\u51fa\u7684\u5b57\u8282\u7801\u9a8c\u8bc1\u6211\u4eec\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u3002<\/p>\n<p><h2>3\u3001 \u7b2c\u4e00\u6b65\uff0c\u4f7f\u7528Flex\u8fdb\u884c\u6587\u6cd5\u5206\u6790 <\/h2>\n<\/p>\n<p>\u8fd9\u662f\u6700\u7b80\u5355\u7684\u4e00\u6b65\uff0c\u7ed9\u5b9a\u8bed\u6cd5\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6211\u4eec\u7684\u8f93\u5165\u8f6c\u6362\u4e00\u7cfb\u5217\u5185\u90e8\u6807\u8bb0token\u3002\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u7684\u8bed\u6cd5\u5177\u6709\u975e\u5e38\u57fa\u7840\u7684\u6807\u8bb0token:\u6807\u793a\u7b26identifier \uff0c\u6570\u5b57\u5e38\u91cf(\u6574\u578b\u548c\u6d6e\u70b9\u578b)\uff0c\u6570\u5b66\u8fd0\u7b97\u7b26\u53f7\uff0c\u62ec\u53f7\uff0c\u4e2d\u62ec\u53f7\uff0c\u6211\u4eec\u7684\u6587\u6cd5\u5b9a\u4e49\u6587\u4ef6\u79f0\u4e3atoken.l\uff0c\u5b83\u5177\u6709\u4e00\u4e9b\u56fa\u5b9a\u7684\u8bed\u6cd5\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a<\/p>\n<pre>\r\n%{\r\n#include <string>\r\n#include \"node.h\"\r\n#include \"parser.hpp\"\r\n#define SAVE_TOKEN yylval.string = new std::string(yytext, yyleng)\r\n#define TOKEN(t) (yylval.token = t)\r\nextern \"C\" int yywrap() { }\r\n%}\r\n\r\n%%\r\n\r\n[ \\t\\n]                 ;\r\n[a-zA-Z_][a-zA-Z0-9_]*  SAVE_TOKEN; return TIDENTIFIER;\r\n[0-9]+\\.[0-9]*          SAVE_TOKEN; return TDOUBLE;\r\n[0-9]+                  SAVE_TOKEN; return TINTEGER;\r\n\"=\"                     return TOKEN(TEQUAL);\r\n\"==\"                    return TOKEN(TCEQ);\r\n\"!=\"                    return TOKEN(TCNE);\r\n\"<\"                     return TOKEN(TCLT);\r\n\"<=\"                    return TOKEN(TCLE);\r\n\">\"                     return TOKEN(TCGT);\r\n\">=\"                    return TOKEN(TCGE);\r\n\"(\"                     return TOKEN(TLPAREN);\r\n\")\"                     return TOKEN(TRPAREN);\r\n\"{\"                     return TOKEN(TLBRACE);\r\n\"}\"                     return TOKEN(TRBRACE);\r\n\".\"                     return TOKEN(TDOT);\r\n\",\"                     return TOKEN(TCOMMA);\r\n\"+\"                     return TOKEN(TPLUS);\r\n\"-\"                     return TOKEN(TMINUS);\r\n\"*\"                     return TOKEN(TMUL);\r\n\"\/\"                     return TOKEN(TDIV);\r\n.                       printf(\"Unknown token!\\n\"); yyterminate();\r\n\r\n%%\r\n<\/pre>\n<p>\u5728\u7b2c\u4e00\u8282(\u8bd1\u8005\u6ce8\uff1a\u5373%{%}\u4e2d\u5b9a\u4e49\u7684\u90e8\u5206)\u58f0\u660e\u4e86\u4e00\u4e9b\u7279\u5b9a\u7684C\u4ee3\u7801\u3002\u7531\u4e8eBison\u4e0d\u4f1a\u53bb\u8bbf\u95ee\u6211\u95e8\u7684yytext\u53d8\u91cf\uff0c\u6211\u4eec\u4f7f\u7528\u5b8f&#8221;SAVE_TOKEN&#8221;\u6765\u4fdd\u8bc1\u6807\u793a\u7b26\u7684\u6587\u672c\u548c\u6587\u672c\u957f\u5ea6\u662f\u5b89\u5168\u7684(\u800c\u4e0d\u662f\u9760\u6807\u8bb0\u672c\u8eab\u6765\u4fdd\u8bc1)\u3002\u7b2c\u4e00\u4e2atoken\u544a\u8bc9\u6211\u4eec\u8981\u5ffd\u7565\u6389\u90a3\u4e9b\u7a7a\u767d\u5b57\u7b26\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\u6211\u4eec\u6709\u4e9b\u4e00\u4e9b\u7b49\u4ef7\u6027\u6bd4\u8f83\u7684\u6807\u8bb0\u548c\u5176\u4ed6\u3002\u8fd8\u6709\u4e00\u4e9b\u6807\u8bb0\u8fd8\u6ca1\u6709\u5b9e\u73b0\uff0c\u4f60\u53ef\u4ee5\u975e\u5e38\u81ea\u7531\u7684\u5c06\u8fd9\u4e9b\u6807\u8bb0\u52a0\u5230\u4f60\u81ea\u5df1\u7684\u7f16\u8bd1\u5668\u4e2d\u53bb\u3002<\/p>\n<p>\u73b0\u5728\u6211\u4eec\u5728\u8fd9\u91cc\u505a\u7684\u662f\u5b9a\u4e49\u8fd9\u4e9b\u6807\u8bb0\u548c\u4ed6\u4eec\u7684\u7b26\u53f7\u540d\u3002\u7b26\u53f7(\u6bd4\u5982TIDENTFIER)\u5c06\u6210\u4e3a\u6211\u4eec\u8bed\u6cd5\u4e2d\u7684\u7ec8\u7ed3\u7b26\u3002\u6211\u4eec\u53ea\u662f\u8fd4\u56de\u5b83\uff0c\u6211\u4eec\u4ece\u672a\u5b9a\u4e49\u5b83\uff0c\u4ed6\u4eec\u662f\u5728\u4ec0\u4e48\u5730\u65b9\u5b9a\u4e49\u7684\uff1f\u5f53\u7136\u662f\u5728bison\u8bed\u6cd5\u6587\u4ef6\u4e2d\u3002\u6211\u4eec\u5305\u542b\u7684parser.hpp\u5934\u6587\u4ef6\u5c06\u4f1a\u88abbison\u6240\u751f\u6210\uff0c\u5e76\u4e14\u91cc\u9762\u7684\u6240\u6709\u7b26\u53f7\u90fd\u5c06\u88ab\u751f\u6210\uff0c\u5e76\u88ab\u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528\u3002<\/p>\n<p>\u6211\u4eec\u5bf9\u8fd9\u4e2atoken.l\u8fd0\u884cflex\u547d\u4ee4\uff0c\u5e76\u751f\u6210tokens.cpp\u6587\u4ef6\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5c06\u4f1a\u548c\u6211\u4eec\u7684\u8bed\u6cd5\u5206\u6790\u5668\u4e00\u8d77\u7f16\u8bd1\u5e76\u63d0\u4f9byylex()\u51fd\u6570\u6765\u8bc6\u522b\u8fd9\u4e9b\u6807\u8bb0\u3002\u6211\u4eec\u5c06\u5728\u7a0d\u540e\u8fd0\u884c\u8fd9\u4e2a\u547d\u4ee4\uff0c\u56e0\u4e3a\u73b0\u5728\u6211\u4eec\u9700\u8981\u4ecebison\u90a3\u91cc\u751f\u6210\u5934\u6587\u4ef6\u3002<\/p>\n<p><h2>4\u3001\u7b2c2\u6b65 \u4f7f\u7528Bison\u8fdb\u884c\u8bed\u6cd5\u5206\u6790<\/h2>\n<\/p>\n<p>\u8fd9\u662f\u6211\u4eec\u5de5\u4f5c\u4e2d\u6700\u5bcc\u6709\u6311\u6218\u6027\u7684\u4e00\u90e8\u5206\u3002\u751f\u6210\u4e00\u4e2a\u6b63\u786e\u7684\u65e0\u4e8c\u4e49\u7684\u8bed\u6cd5\u5e76\u4e0d\u662f\u4e00\u9879\u7b80\u5355\u7684\u5de5\u4f5c\uff0c\u8981\u7ecf\u8fc7\u5f88\u591a\u5b9e\u8df5\u52aa\u529b\u3002\u5e86\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4f8b\u5b50\u4e2d\u7684\u8bed\u6cd5\u662f\u7b80\u5355\u800c\u5b8c\u6574\u7684\u3002\u5728\u6211\u4eec\u5b9e\u73b0\u6211\u4eec\u7684\u8bed\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u8be6\u7ec6\u7684\u8bb2\u89e3\u4e00\u4e0b\u6211\u4eec\u7684\u8bbe\u8ba1\u3002<\/p>\n<p><h3>4.1\u3001\u8bbe\u8ba1AST(\u62bd\u8c61\u8bed\u6cd5\u6811)<\/h3>\n<\/p>\n<p>\u8bed\u6cd5\u5206\u6790\u7684\u6700\u7ec8\u7ed3\u679c\u662f\u62bd\u8c61\u8bed\u6cd5\u6811AST\uff0c\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0cBison\u751f\u6210\u62bd\u8c61\u8bed\u6cd5\u6811\u7684\u6700\u4f18\u5de5\u5177\uff1b\u6211\u4eec\u552f\u4e00\u9700\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5c06\u6211\u4eec\u7684\u4ee3\u7801\u63d2\u5165\u5230\u8bed\u6cd5\u4e2d\u53bb\u3002<\/p>\n<p>\u6587\u672c\u5f62\u5f0f\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982&#8221;int x&#8221;\u4ee3\u8868\u4e86\u6211\u4eec\u8bed\u8a00\u7684\u6587\u672c\u5f62\u5f0f\uff0c\u548c\u8fd9\u4e2a\u7c7b\u4f3c\uff0c\u62bd\u8c61\u8bed\u6cd5\u6811AST\u5219\u4ee3\u8868\u4e86\u6211\u4eec\u8bed\u8a00\u5728\u5185\u5b58\u4e2d\u7684\u8868\u73b0\u5f62\u5f0f\u4e00\u6837(\u5728\u8bed\u8a00\u5728\u7ec4\u88c5\u6210\u800c\u8fdb\u7a0b\u7801\u4e4b\u524d)\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4eec\u8981\u5728\u628a\u8fd9\u4e9b\u63d2\u5165\u5728\u8bed\u6cd5\u5206\u6790\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u9996\u5148\u8bbe\u8ba1\u597d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u975e\u5e38\u76f4\u63a5\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u4e3a\u8bed\u6cd5\u4e2d\u7684\u6bcf\u4e2a\u8bed\u4e49\u5355\u5143\u521b\u5efa\u4e86\u4e00\u4e2a\u7ed3\u6784\u3002\u65b9\u6cd5\u58f0\u660e\u3001\u65b9\u6cd5\u8c03\u7528\uff0c\u53d8\u91cf\u58f0\u660e\uff0c\u5f15\u7528\uff0c\u8fd9\u4e9b\u90fd\u6784\u6210\u4e86\u62bd\u8c61\u8bed\u6cd5\u6811\u7684\u8282\u70b9\u3002\u6211\u4eec\u8bed\u8a00\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u7684\u8282\u70b9\u5982\u4e0b\u56fe\uff1a<br \/>\n<img decoding=\"async\" loading=\"lazy\" border=\"0\" alt=\"Our Toy Language AST\" src=\"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/ClassDiagram.png\" width=\"640\" height=\"505\" \/><br \/>\n\u4e0a\u56fe\u7684C++\u4ee3\u7801\u5982\u4e0b\uff1a<br \/>\nnode.h\u6587\u4ef6<\/p>\n<pre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\">\r\n#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\n#include &lt;llvm\/Value.h&gt;\r\n\r\nclass CodeGenContext;\r\nclass NStatement;\r\nclass NExpression;\r\nclass NVariableDeclaration;\r\n\r\ntypedef std::vector&lt;NStatement*&gt; StatementList;\r\ntypedef std::vector&lt;NExpression*&gt; ExpressionList;\r\ntypedef std::vector&lt;NVariableDeclaration*&gt; VariableList;\r\n\r\nclass Node {\r\npublic:\r\n    virtual ~Node() {}\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context) { }\r\n};\r\n\r\nclass NExpression : public Node {\r\n};\r\n\r\nclass NStatement : public Node {\r\n};\r\n\r\nclass NInteger : public NExpression {\r\npublic:\r\n    long long value;\r\n    NInteger(long long value) : value(value) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NDouble : public NExpression {\r\npublic:\r\n    double value;\r\n    NDouble(double value) : value(value) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NIdentifier : public NExpression {\r\npublic:\r\n    std::string name;\r\n    NIdentifier(const std::string&amp; name) : name(name) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NMethodCall : public NExpression {\r\npublic:\r\n    const NIdentifier&amp; id;\r\n    ExpressionList arguments;\r\n    NMethodCall(const NIdentifier&amp; id, ExpressionList&amp; arguments) :\r\n        id(id), arguments(arguments) { }\r\n    NMethodCall(const NIdentifier&amp; id) : id(id) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NBinaryOperator : public NExpression {\r\npublic:\r\n    int op;\r\n    NExpression&amp; lhs;\r\n    NExpression&amp; rhs;\r\n    NBinaryOperator(NExpression&amp; lhs, int op, NExpression&amp; rhs) :\r\n        lhs(lhs), rhs(rhs), op(op) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NAssignment : public NExpression {\r\npublic:\r\n    NIdentifier&amp; lhs;\r\n    NExpression&amp; rhs;\r\n    NAssignment(NIdentifier&amp; lhs, NExpression&amp; rhs) :\r\n        lhs(lhs), rhs(rhs) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NBlock : public NExpression {\r\npublic:\r\n    StatementList statements;\r\n    NBlock() { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NExpressionStatement : public NStatement {\r\npublic:\r\n    NExpression&amp; expression;\r\n    NExpressionStatement(NExpression&amp; expression) :\r\n        expression(expression) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NVariableDeclaration : public NStatement {\r\npublic:\r\n    const NIdentifier&amp; type;\r\n    NIdentifier&amp; id;\r\n    NExpression *assignmentExpr;\r\n    NVariableDeclaration(const NIdentifier&amp; type, NIdentifier&amp; id) :\r\n        type(type), id(id) { }\r\n    NVariableDeclaration(const NIdentifier&amp; type, NIdentifier&amp; id, NExpression *assignmentExpr) :\r\n        type(type), id(id), assignmentExpr(assignmentExpr) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\nclass NFunctionDeclaration : public NStatement {\r\npublic:\r\n    const NIdentifier&amp; type;\r\n    const NIdentifier&amp; id;\r\n    VariableList arguments;\r\n    NBlock&amp; block;\r\n    NFunctionDeclaration(const NIdentifier&amp; type, const NIdentifier&amp; id,\r\n            const VariableList&amp; arguments, NBlock&amp; block) :\r\n        type(type), id(id), arguments(arguments), block(block) { }\r\n    virtual llvm::Value* codeGen(CodeGenContext&amp; context);\r\n};\r\n\r\n<\/pre>\n<p>\u975e\u5e38\u7684\u6e05\u6670\u660e\u4e86\uff0c\u6211\u4eec\u7701\u7565\u4e86getter\u548csetter\u65b9\u6cd5\uff0c\u8fd9\u91cc\u53ea\u5217\u51fa\u4e86\u5171\u6709\u6210\u5458\uff1b\u8fd9\u4e9b\u7c7b\u4e5f\u4e0d\u9700\u8981\u5f71\u85cf\u79c1\u6709\u6570\u636e\uff0c\u5e76\u7701\u7565\u4e86codeGen\u65b9\u6cd5\u3002\u5728\u6211\u4eec\u5bfc\u51faAST\u6210LLVM\u7684\u5b57\u8282\u7801\u65f6\uff0c\u5c31\u9700\u8981\u4f7f\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\u3002<\/p>\n<p><h3>4.2\u3001Bison\u4ecb\u7ecd<\/h3>\n<\/p>\n<p>bison\u7684\u8bed\u6cd5\u5b9a\u4e49\u6587\u4ef6\u540c\u6837\u662f\u7531\u8fd9\u4e9b\u6807\u8bb0\u6784\u6210\u7684\u6700\u590d\u6742\u7684\u90e8\u5206\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u6280\u672f\u4e0a\u6709\u591a\u590d\u6742\uff0c\u4f46\u662f\u6211\u4e5f\u4f1a\u82b1\u4e00\u4e9b\u65f6\u95f4\u6765\u8ba8\u8bba\u4e00\u4e0bBison\u7684\u8bed\u6cd5\u7ec6\u8282\uff0c\u597d\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u7acb\u523b\u6765\u719f\u6089\u4e00\u4e0bBison\u7684\u8bed\u6cd5\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u57fa\u4e8e\u7c7b\u4f3c\u4e8eBNF\u7684\u8bed\u6cd5\uff0c\u4f7f\u7528\u5b9a\u4e49\u7684\u597d\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u6765\u7ec4\u6210\u6211\u4eec\u6709\u6548\u7684\u6bcf\u4e00\u4e2a\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f(\u8fd9\u4e9b\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u5c31\u4ee3\u8868\u6211\u4eec\u4e4b\u524d\u5b9a\u4e49\u7684AST\u8282\u70b9)\u3002\u4f8b\u5982\uff1a<\/p>\n<pre>\r\nif_stmt : IF '(' condition ')' block { \/* do stuff when this rule is encountered *\/ }\r\n        | IF '(' condition ')'       { ... }\r\n        ;\r\n<\/pre>\n<p>\u5728\u4e0a\u9762\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2aif\u8bed\u53e5(\u5982\u679c\u6211\u4eec\u652f\u6301if\u8bed\u53e5\u8bdd)\uff0c\u5b83\u548cBNF\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u6bcf\u4e2a\u8bed\u6cd5\u540e\u9762\u90fd\u8ddf\u4e86\u4e00\u7cfb\u5217\u52a8\u4f5c(\u5728'{&#8216;\u548c&#8217;}&#8217;\u4e4b\u95f4\u7684\u5185\u5bb9)\u3002\u8fd9\u4e2a\u52a8\u4f5c\u5c06\u5728\u6b64\u6761\u8bed\u6cd5\u88ab\u8bc6\u522b(\u8bd1\u8005\u6ce8\uff1a\u5f52\u7ea6)\u7684\u65f6\u5019\u88ab\u6267\u884c\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5c06\u4f1a\u9012\u5f52\u5730\u6309\u4ece\u53f6\u5b50\u7b26\u53f7\u5230\u6839\u8282\u70b9\u7b26\u53f7\u7684\u6b21\u5e8f\u6267\u884c\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6bcf\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u6700\u7ec8\u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u68f5\u5927\u7684\u8bed\u6cd5\u6811\u3002\u4f60\u5c06\u4f1a\u770b\u5230\u7684&#8217;$$&#8217;\u7b26\u53f7\u4ee3\u8868\u7740\u5f53\u524d\u6811\u7684\u8ddf\u8282\u70b9(\u8bd1\u8005\u6ce8\uff1a&#8217;$$&#8217;\u4ee3\u8868\u672c\u6761\u8bed\u6cd5\u89c4\u5219\u4e2d\u5192\u53f7\u5de6\u8fb9\u7684\u90e8\u5206\u7684\u8bed\u4e49\u5185\u5bb9)\u3002\u6b64\u5916&#8217;$1&#8217;\u4ee3\u8868\u4e86\u672c\u6761\u89c4\u5219\u53f6\u5b50\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7b26\u53f7(\u8bd1\u8005\u6ce8\uff1a&#8217;$1&#8217;\u4ee3\u8868\u4e86\u672c\u6761\u8bed\u6cd5\u89c4\u5219\u5192\u53f7\u53f3\u8fb9\u7684\u5185\u5bb9\uff0c$1\u4ee3\u8868\u5192\u53f7\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u7b26\u53f7\u7684\u8bed\u4e49\u503c)\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f53&#8217;condition&#8217;\u6709\u6548\u65f6\u6211\u4eec\u5c06\u4f1a\u628a$3 \u8d4b\u503c\u7ed9$$\u3002\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u89e3\u91ca\u5982\u4f55\u5c06\u6211\u4eecAST\u548c\u8bed\u6cd5\u89c4\u5219\u5173\u8054\u8d77\u6765\u3002\u6211\u4eec\u5c06\u5728\u6bcf\u4e00\u6761\u89c4\u5219\u4e2d\u901a\u5e38\u8d4b\u503c\u4e00\u4e2a\u8282\u70b9\u5230$$\uff0c\u6700\u540e\u8fd9\u4e9b\u89c4\u5219\u4f1a\u5408\u5e76\u6210\u4e00\u4e2a\u5927\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u3002Bison\u7684\u90e8\u5206\u662f\u6211\u4eec\u8bed\u8a00\u6700\u590d\u6742\u7684\u90e8\u5206\uff0c\u4f60\u9700\u8981\u82b1\u4e00\u70b9\u65f6\u95f4\u53bb\u7406\u89e3\u5b83\u3002\u6b64\u5916\u5230\u6b64\u4e3a\u6b62\uff0c\u4f60\u8fd8\u6ca1\u6709\u770b\u5230\u5b8c\u6574\u7684\u4ee3\u7801\u3002\u4e0b\u9762\u5c31\u662f\u5b8c\u6574\u7684Bison\u90e8\u5206\u7684\u4ee3\u7801\uff1a<br \/>\nparser.y<\/p>\n<pre>\r\n%{\r\n    #include \"node.h\"\r\n    NBlock *programBlock; \/* the top level root node of our final AST *\/\r\n\r\n    extern int yylex();\r\n    void yyerror(const char *s) { printf(\"ERROR: %s\\n\", s); }\r\n%}\r\n\r\n\/* Represents the many different ways we can access our data *\/\r\n%union {\r\n    Node *node;\r\n    NBlock *block;\r\n    NExpression *expr;\r\n    NStatement *stmt;\r\n    NIdentifier *ident;\r\n    NVariableDeclaration *var_decl;\r\n    std::vector<NVariableDeclaration*> *varvec;\r\n    std::vector<NExpression*> *exprvec;\r\n    std::string *string;\r\n    int token;\r\n}\r\n\r\n\/* Define our terminal symbols (tokens). This should\r\n   match our tokens.l lex file. We also define the node type\r\n   they represent.\r\n *\/\r\n%token <string> TIDENTIFIER TINTEGER TDOUBLE\r\n%token <token> TCEQ TCNE TCLT TCLE TCGT TCGE TEQUAL\r\n%token <token> TLPAREN TRPAREN TLBRACE TRBRACE TCOMMA TDOT\r\n%token <token> TPLUS TMINUS TMUL TDIV\r\n\r\n\/* Define the type of node our nonterminal symbols represent.\r\n   The types refer to the %union declaration above. Ex: when\r\n   we call an ident (defined by union type ident) we are really\r\n   calling an (NIdentifier*). It makes the compiler happy.\r\n *\/\r\n%type <ident> ident\r\n%type <expr> numeric expr\r\n%type <varvec> func_decl_args\r\n%type <exprvec> call_args\r\n%type <block> program stmts block\r\n%type <stmt> stmt var_decl func_decl\r\n%type <token> comparison\r\n\r\n\/* Operator precedence for mathematical operators *\/\r\n%left TPLUS TMINUS\r\n%left TMUL TDIV\r\n\r\n%start program\r\n\r\n%%\r\n\r\nprogram : stmts { programBlock = $1; }\r\n        ;\r\n\r\nstmts : stmt { $$ = new NBlock(); $$->statements.push_back($<stmt>1); }\r\n      | stmts stmt { $1->statements.push_back($<stmt>2); }\r\n      ;\r\n\r\nstmt : var_decl | func_decl\r\n     | expr { $$ = new NExpressionStatement(*$1); }\r\n     ;\r\n\r\nblock : TLBRACE stmts TRBRACE { $$ = $2; }\r\n      | TLBRACE TRBRACE { $$ = new NBlock(); }\r\n      ;\r\n\r\nvar_decl : ident ident { $$ = new NVariableDeclaration(*$1, *$2); }\r\n         | ident ident TEQUAL expr { $$ = new NVariableDeclaration(*$1, *$2, $4); }\r\n         ;\r\n\r\nfunc_decl : ident ident TLPAREN func_decl_args TRPAREN block\r\n            { $$ = new NFunctionDeclaration(*$1, *$2, *$4, *$6); delete $4; }\r\n          ;\r\n\r\nfunc_decl_args : \/*blank*\/  { $$ = new VariableList(); }\r\n          | var_decl { $$ = new VariableList(); $$->push_back($<var_decl>1); }\r\n          | func_decl_args TCOMMA var_decl { $1->push_back($<var_decl>3); }\r\n          ;\r\n\r\nident : TIDENTIFIER { $$ = new NIdentifier(*$1); delete $1; }\r\n      ;\r\n\r\nnumeric : TINTEGER { $$ = new NInteger(atol($1->c_str())); delete $1; }\r\n        | TDOUBLE { $$ = new NDouble(atof($1->c_str())); delete $1; }\r\n        ;\r\n\r\nexpr : ident TEQUAL expr { $$ = new NAssignment(*$<ident>1, *$3); }\r\n     | ident TLPAREN call_args TRPAREN { $$ = new NMethodCall(*$1, *$3); delete $3; }\r\n     | ident { $<ident>$ = $1; }\r\n     | numeric\r\n     | expr comparison expr { $$ = new NBinaryOperator(*$1, $2, *$3); }\r\n     | TLPAREN expr TRPAREN { $$ = $2; }\r\n     ;\r\n\r\ncall_args : \/*blank*\/  { $$ = new ExpressionList(); }\r\n          | expr { $$ = new ExpressionList(); $$->push_back($1); }\r\n          | call_args TCOMMA expr  { $1->push_back($3); }\r\n          ;\r\n\r\ncomparison : TCEQ | TCNE | TCLT | TCLE | TCGT | TCGE\r\n           | TPLUS | TMINUS | TMUL | TDIV\r\n           ;\r\n\r\n%%\r\n<\/pre>\n<p><h2>5\u3001\u751f\u6210Flex\u548cBison\u4ee3\u7801<\/h2>\n<\/p>\n<p>\u73b0\u5728\u6211\u4eec\u6709\u4e86Flex\u7684token.l\u6587\u4ef6\u548cBison\u7684parser.y\u6587\u4ef6\u3002\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4f20\u9012\u7ed9\u5de5\u5177\uff0c\u5e76\u7531\u5de5\u5177\u6765\u751f\u6210c++\u4ee3\u7801\u6587\u4ef6\u3002\u6ce8\u610fBison\u540c\u65f6\u4f1a\u4e3aFlex\u751f\u6210parser.hpp\u5934\u6587\u4ef6\uff1b\u8fd9\u6837\u505a\u662f\u901a\u8fc7-d\u5f00\u5173\u5b9e\u73b0\u7684\uff0c\u8fd9\u4e2a\u5f00\u5173\u662f\u7684\u6211\u4eec\u7684\u6807\u8bb0\u58f0\u660e\u548c\u6e90\u6587\u4ef6\u5206\u5f00\uff0c\u8fd9\u6837\u5c31\u662f\u7684\u6211\u4eec\u53ef\u4ee5\u8ba9\u8fd9\u4e9btoken\u6807\u8bb0\u88ab\u5176\u4ed6\u7684\u7a0b\u5e8f\u4f7f\u7528\u3002\u4e0b\u9762\u7684\u547d\u4ee4\u521b\u5efaparser.cpp\uff0cparser.hpp\u548ctokens.cpp\u6e90\u6587\u4ef6\u3002<\/p>\n<pre>\r\n$ bison -d -o parser.cpp parser.y\r\n$ lex -o tokens.cpp tokens.l\r\n<\/pre>\n<p>\u5982\u679c\u4e0a\u8ff0\u5de5\u4f5c\u90fd\u6ca1\u6709\u51fa\u9519\u7684\u8bdd\uff0c\u6211\u4eec\u73b0\u5728\u4f4d\u7f6e\u5df2\u7ecf\u5b8c\u6210\u4e86\u6211\u4eec\u7f16\u8bd1\u5668\u5de5\u4f5c\u603b\u91cf\u76842\/3\u3002\u5982\u679c\u4f60\u73b0\u5728\u60f3\u6d4b\u8bd5\u4e00\u4e0b\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u4f60\u53ef\u4ee5\u7f16\u8bd1\u4e00\u4e2a\u7b80\u5355\u7684main.cpp\u7a0b\u5e8f\uff1a<\/p>\n<pre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\">\r\n#include &lt;iostream&gt;\r\n#include &quot;node.h&quot;\r\nextern NBlock* programBlock;\r\nextern int yyparse();\r\n\r\nint main(int argc, char **argv)\r\n{\r\n    yyparse();\r\n    std::cout &lt;&lt; programBlock &lt;&lt; endl;\r\n    return 0;\r\n}\r\n<\/pre>\n<p>\u4f60\u53ef\u4ee5\u7f16\u8bd1\u8fd9\u4e9b\u6587\u4ef6\uff1a<br \/>\n$ g++ -o parser parser.cpp tokens.cpp main.cpp<br \/>\n\u73b0\u5728\u4f60\u9700\u8981\u5b89\u88c5LLVM\u4e86\uff0c\u56e0\u4e3allvm::Value\u88abnode.h\u5f15\u7528\u4e86\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u8fd9\u4e48\u505a\uff0c\u53ea\u662f\u60f3\u6d4b\u8bd5\u4e00\u4e0bFlex\u548cBison\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u6ce8\u91ca\u6389node.h\u4e2dcodeGen()\u65b9\u6cd5\u3002<\/p>\n<p>\u5982\u679c\u4e0a\u8ff0\u5de5\u4f5c\u90fd\u5b8c\u6210\u4e86\uff0c\u4f60\u73b0\u5728\u5c06\u6709\u4e00\u4e2a\u8bed\u6cd5\u5206\u6790\u5668\uff0c\u8fd9\u4e2a\u8bed\u6cd5\u5206\u6790\u5668\u5c06\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u5165\uff0c\u5e76\u6253\u51fa\u5728\u5185\u5b58\u4e2d\u4ee3\u8868\u62bd\u8c61\u8bed\u6cd5\u6811\u8ddf\u8282\u70b9\u7684\u5185\u5b58\u975e\u96f6\u5730\u5740\u3002<\/p>\n<h2>6\u3001\u7ec4\u88c5AST\u548cLLVM<\/h2>\n<p>\u7f16\u8bd1\u5668\u7684\u4e0b\u4e00\u6b65\u5f88\u81ea\u7136\u5730\u662f\u5e94\u8be5\u5c06AST\u8f6c\u6362\u6210\u673a\u5668\u7801\u3002\u8fd9\u610f\u5473\u7740\u5c06\u6bcf\u4e00\u4e2a\u8bed\u4e49\u8282\u70b9\u8f6c\u6362\u6210\u7b49\u4ef7\u7684\u673a\u5668\u6307\u4ee4\u3002LLVM\u5c06\u5e2e\u52a9\u6211\u4eec\u628a\u8fd9\u6b65\u53d8\u5f97\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3aLLVM\u5c06\u771f\u5b9e\u7684\u6307\u4ee4\u62bd\u8c61\u6210\u7c7b\u4f3cAST\u7684\u6307\u4ee4\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u771f\u6b63\u8981\u505a\u7684\u4e8b\u5c31\u662f\u5c06AST\u8f6c\u6362\u6210\u62bd\u8c61\u6307\u4ee4\u3002<br \/>\n\u4f60\u53ef\u4ee5\u60f3\u8c61\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u4ece\u62bd\u8c61\u8bed\u6cd5\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u904d\u5386\u6bcf\u4e00\u4e2a\u6811\u4e0a\u8282\u70b9\u5e76\u4ea7\u751f\u5b57\u8282\u7801\u7684\u8fc7\u7a0b\u3002\u73b0\u5728\u5c31\u662f\u4f7f\u7528\u6211\u4eec\u5728Node\u4e2d\u5b9a\u4e49\u7684codeGen\u65b9\u6cd5\u7684\u65f6\u5019\u4e86\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u904d\u5386NBlock\u4ee3\u7801\u7684\u65f6\u5019(\u8bed\u4e49\u4e0aNBlock\u4ee3\u8868\u4e00\u7ec4\u6211\u4eec\u8bed\u8a00\u7684\u8bed\u53e5\u7684\u96c6\u5408)\uff0c\u6211\u4eec\u5c06\u8c03\u7528\u5217\u8868\u4e2d\u6bcf\u6761\u8bed\u53e5\u7684codeGen\u65b9\u6cd5\u3002\u4e0a\u9762\u6b65\u9aa4\u4ee3\u7801\u7c7b\u4f3c\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a<\/p>\n<pre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\">\r\nValue* NBlock::codeGen(CodeGenContext&amp; context)\r\n{\r\n    StatementList::const_iterator it;\r\n    Value *last = NULL;\r\n    for (it = statements.begin(); it != statements.end(); it++) {\r\n        std::cout &lt;&lt; &quot;Generating code for &quot; &lt;&lt; typeid(**it).name() &lt;&lt; endl;\r\n        last = (**it).codeGen(context);\r\n    }\r\n    std::cout &lt;&lt; &quot;Creating block&quot; &lt;&lt; endl;\r\n    return last;\r\n}\r\n<\/pre>\n<p>\u6211\u4eec\u5c06\u5b9e\u73b0\u62bd\u8c61\u8bed\u6cd5\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684codeGen\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u5411\u4e0b\u904d\u5386\u6811\u7684\u65f6\u5019\u8c03\u7528\u5b83\uff0c\u5e76\u9690\u5f0f\u7684\u904d\u5386\u6211\u4eec\u6574\u4e2a\u62bd\u8c61\u8bed\u6cd5\u6811\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5728CodeGenContext\u7c7b\u6765\u544a\u8bc9\u6211\u4eec\u751f\u6210\u5b57\u8282\u7801\u7684\u4f4d\u7f6e\u3002<\/p>\n<p><h3> 6.1\u3001\u5173\u4e8eLLVM\u8981\u6ce8\u610f\u7684\u4e00\u4e9b\u4fe1\u606f<\/h3>\n<\/p>\n<p>LLVM\u6700\u5927\u7684\u4e00\u4e2a\u786e\u5b9a\u5c31\u662f\uff0c\u4f60\u5f88\u96be\u627e\u5230LLVM\u7684\u76f8\u5173\u6587\u6863\u3002\u5728\u7ebf\u624b\u518c\u3001\u6559\u7a0b\u3001\u6216\u5176\u4ed6\u7684\u6587\u6863\u90fd\u6ca1\u6709\u53ca\u65f6\u7684\u5f97\u5230\u76f8\u5173\u7ef4\u62a4\uff0c\u8fd9\u4e9b\u6587\u6863\u5927\u90e8\u5206\u90fd\u662f\u8fc7\u671f\u7684\u6587\u6863\u3002\u9664\u975e\u4f60\u53bb\u6df1\u5165\u7814\u7a76\uff0c\u5426\u5219\u4f60\u5f88\u96be\u627e\u5230\u5173\u4e8eC++ API\u7684\u4fe1\u606f\u3002\u5982\u679c\u4f60\u81ea\u5df1\u5b89\u88c5LLVM\uff0cdocs<br \/>\n\u662f\u6700\u65b0\u7684\u6587\u6863\u3002<\/p>\n<p>\u6211\u53d1\u73b0\u6700\u597d\u5b66\u4e60LLVM\u7684\u65b9\u6cd5\u5c31\u662f\u901a\u8fc7LLVM\u7684\u4f8b\u5b50\u53bb\u5b66\u4e60\u3002\u5728LLVM\u7684\u538b\u7f29\u5305\u7684&#8217;example&#8217;\u76ee\u5f55\u4e0b\u6709\u5f88\u591a\u5feb\u901f\u751f\u6210\u5b57\u8282\u7801\u7684\u4f8b\u5b50\u3002\u5728<a href=\"http:\/\/llvm.org\/demo\/\">LLVM demo site<\/a>\u4e0a\u53ef\u4ee5\u5c06C\u505a\u8f93\u5165\uff0c\u7136\u540e\u751f\u6210C++ API\u7684\u4f8b\u5b50\u3002\u4ee5\u8fd9\u4e9b\u4f8b\u5b50\u63d0\u4f9b\u7684\u65b9\u6cd5\uff0c\u6211\u627e\u5230\u4e86\u7c7b\u4f3c\u4e8eint x = 5 ;\u7684\u6307\u4ee4\u7684\u751f\u6210\u65b9\u6cd5\u3002\u6211\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u5b9e\u73b0\u5927\u90e8\u5206\u7684\u8282\u70b9\u3002<\/p>\n<p>\u5173\u4e8eLLVM\u7684\u95ee\u9898\u63cf\u8ff0\u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u5c06\u5728\u4e0b\u9762\u7f57\u5217\u51facodegen.h\u548ccodegen.cpp\u7684\u6e90\u4ee3\u7801<\/p>\n<p>codegen.h\u7684\u5185\u5bb9\u3002<\/p>\n<pre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\">\r\n#include &lt;stack&gt;\r\n#include &lt;llvm\/Module.h&gt;\r\n#include &lt;llvm\/Function.h&gt;\r\n#include &lt;llvm\/PassManager.h&gt;\r\n#include &lt;llvm\/CallingConv.h&gt;\r\n#include &lt;llvm\/Bitcode\/ReaderWriter.h&gt;\r\n#include &lt;llvm\/Analysis\/Verifier.h&gt;\r\n#include &lt;llvm\/Assembly\/PrintModulePass.h&gt;\r\n#include &lt;llvm\/Support\/IRBuilder.h&gt;\r\n#include &lt;llvm\/ModuleProvider.h&gt;\r\n#include &lt;llvm\/ExecutionEngine\/GenericValue.h&gt;\r\n#include &lt;llvm\/ExecutionEngine\/JIT.h&gt;\r\n#include &lt;llvm\/Support\/raw_ostream.h&gt;\r\n\r\nusing namespace llvm;\r\n\r\nclass NBlock;\r\n\r\nclass CodeGenBlock {\r\npublic:\r\n    BasicBlock *block;\r\n    std::map&lt;std::string , Value*&gt; locals;\r\n};\r\n\r\nclass CodeGenContext {\r\n    std::stack&lt;codegenblock  *&gt; blocks;\r\n    Function *mainFunction;\r\n\r\npublic:\r\n    Module *module;\r\n    CodeGenContext() { module = new Module(&quot;main&quot;); }\r\n\r\n    void generateCode(NBlock&amp; root);\r\n    GenericValue runCode();\r\n    std::map&lt;std::string , Value*&gt;&amp; locals() { return blocks.top()-&gt;locals; }\r\n    BasicBlock *currentBlock() { return blocks.top()-&gt;block; }\r\n    void pushBlock(BasicBlock *block) { blocks.push(new CodeGenBlock()); blocks.top()-&gt;block = block; }\r\n    void popBlock() { CodeGenBlock *top = blocks.top(); blocks.pop(); delete top; }\r\n};\r\n<\/pre>\n<p>codegen.cpp\u7684\u5185\u5bb9\u3002<\/p>\n<pre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\">\r\n#include &quot;node.h&quot;\r\n#include &quot;codegen.h&quot;\r\n#include &quot;parser.hpp&quot;\r\n\r\nusing namespace std;\r\n\r\n\/* Compile the AST into a module *\/\r\nvoid CodeGenContext::generateCode(NBlock&amp; root)\r\n{\r\n    std::cout &lt;&lt; &quot;Generating code...\\n&quot;;\r\n\r\n    \/* Create the top level interpreter function to call as entry *\/\r\n    vector&lt;const type*&gt; argTypes;\r\n    FunctionType *ftype = FunctionType::get(Type::VoidTy, argTypes, false);\r\n    mainFunction = Function::Create(ftype, GlobalValue::InternalLinkage, &quot;main&quot;, module);\r\n    BasicBlock *bblock = BasicBlock::Create(&quot;entry&quot;, mainFunction, 0);\r\n\r\n    \/* Push a new variable\/block context *\/\r\n    pushBlock(bblock);\r\n    root.codeGen(*this); \/* emit bytecode for the toplevel block *\/\r\n    ReturnInst::Create(bblock);\r\n    popBlock();\r\n\r\n    \/* Print the bytecode in a human-readable format\r\n       to see if our program compiled properly\r\n     *\/\r\n    std::cout &lt;&lt; &quot;Code is generated.\\n&quot;;\r\n    PassManager pm;\r\n    pm.add(createPrintModulePass(&amp;outs()));\r\n    pm.run(*module);\r\n}\r\n\r\n\/* Executes the AST by running the main function *\/\r\nGenericValue CodeGenContext::runCode() {\r\n    std::cout &lt;&lt; &quot;Running code...\\n&quot;;\r\n    ExistingModuleProvider *mp = new ExistingModuleProvider(module);\r\n    ExecutionEngine *ee = ExecutionEngine::create(mp, false);\r\n    vector&lt;genericvalue&gt; noargs;\r\n    GenericValue v = ee-&gt;runFunction(mainFunction, noargs);\r\n    std::cout &lt;&lt; &quot;Code was run.\\n&quot;;\r\n    return v;\r\n}\r\n\r\n\/* Returns an LLVM type based on the identifier *\/\r\nstatic const Type *typeOf(const NIdentifier&amp; type)\r\n{\r\n    if (type.name.compare(&quot;int&quot;) == 0) {\r\n        return Type::Int64Ty;\r\n    }\r\n    else if (type.name.compare(&quot;double&quot;) == 0) {\r\n        return Type::FP128Ty;\r\n    }\r\n    return Type::VoidTy;\r\n}\r\n\r\n\/* -- Code Generation -- *\/\r\n\r\nValue* NInteger::codeGen(CodeGenContext&amp; context)\r\n{\r\n    std::cout &lt;&lt; &quot;Creating integer: &quot; &lt;&lt; value &lt;&lt; endl;\r\n    return ConstantInt::get(Type::Int64Ty, value, true);\r\n}\r\n\r\nValue* NDouble::codeGen(CodeGenContext&amp; context)\r\n{\r\n    std::cout &lt;&lt; &quot;Creating double: &quot; &lt;&lt; value &lt;&lt; endl;\r\n    return ConstantFP::get(Type::FP128Ty, value);\r\n}\r\n\r\nValue* NIdentifier::codeGen(CodeGenContext&amp; context)\r\n{\r\n    std::cout &lt;&lt; &quot;Creating identifier reference: &quot; &lt;&lt; name &lt;&lt; endl;\r\n    if (context.locals().find(name) == context.locals().end()) {\r\n        std::cerr &lt;&lt; &quot;undeclared variable &quot; &lt;&lt; name &lt;&lt; endl;\r\n        return NULL;\r\n    }\r\n    return new LoadInst(context.locals()[name], &quot;&quot;, false, context.currentBlock());\r\n}\r\n\r\nValue* NMethodCall::codeGen(CodeGenContext&amp; context)\r\n{\r\n    Function *function = context.module-&gt;getFunction(id.name.c_str());\r\n    if (function == NULL) {\r\n        std::cerr &lt;&lt; &quot;no such function &quot; &lt;&lt; id.name &lt;&lt; endl;\r\n    }\r\n    std::vector&lt;value *&gt; args;\r\n    ExpressionList::const_iterator it;\r\n    for (it = arguments.begin(); it != arguments.end(); it++) {\r\n        args.push_back((**it).codeGen(context));\r\n    }\r\n    CallInst *call = CallInst::Create(function, args.begin(), args.end(), &quot;&quot;, context.currentBlock());\r\n    std::cout &lt;&lt; &quot;Creating method call: &quot; &lt;&lt; id.name &lt;&lt; endl;\r\n    return call;\r\n}\r\n\r\nValue* NBinaryOperator::codeGen(CodeGenContext&amp; context)\r\n{\r\n    std::cout &lt;&lt; &quot;Creating binary operation &quot; &lt;&lt; op &lt;&lt; endl;\r\n    Instruction::BinaryOps instr;\r\n    switch (op) {\r\n        case TPLUS:     instr = Instruction::Add; goto math;\r\n        case TMINUS:    instr = Instruction::Sub; goto math;\r\n        case TMUL:      instr = Instruction::Mul; goto math;\r\n        case TDIV:      instr = Instruction::SDiv; goto math;\r\n\r\n        \/* TODO comparison *\/\r\n    }\r\n\r\n    return NULL;\r\nmath:\r\n    return BinaryOperator::Create(instr, lhs.codeGen(context),\r\n        rhs.codeGen(context), &quot;&quot;, context.currentBlock());\r\n}\r\n\r\nValue* NAssignment::codeGen(CodeGenContext&amp; context)\r\n{\r\n    std::cout &lt;&lt; &quot;Creating assignment for &quot; &lt;&lt; lhs.name &lt;&lt; endl;\r\n    if (context.locals().find(lhs.name) == context.locals().end()) {\r\n        std::cerr &lt;&lt; &quot;undeclared variable &quot; &lt;&lt; lhs.name &lt;&lt; endl;\r\n        return NULL;\r\n    }\r\n    return new StoreInst(rhs.codeGen(context), context.locals()[lhs.name], false, context.currentBlock());\r\n}\r\n\r\nValue* NBlock::codeGen(CodeGenContext&amp; context)\r\n{\r\n    StatementList::const_iterator it;\r\n    Value *last = NULL;\r\n    for (it = statements.begin(); it != statements.end(); it++) {\r\n        std::cout &lt;&lt; &quot;Generating code for &quot; &lt;&lt; typeid(**it).name() &lt;&lt; endl;\r\n        last = (**it).codeGen(context);\r\n    }\r\n    std::cout &lt;&lt; &quot;Creating block&quot; &lt;&lt; endl;\r\n    return last;\r\n}\r\n\r\nValue* NExpressionStatement::codeGen(CodeGenContext&amp; context)\r\n{\r\n    std::cout &lt;&lt; &quot;Generating code for &quot; &lt;&lt; typeid(expression).name() &lt;&lt; endl;\r\n    return expression.codeGen(context);\r\n}\r\n\r\nValue* NVariableDeclaration::codeGen(CodeGenContext&amp; context)\r\n{\r\n    std::cout &lt;&lt; &quot;Creating variable declaration &quot; &lt;&lt; type.name &lt;&lt; &quot; &quot; &lt;&lt; id.name &lt;&lt; endl;\r\n    AllocaInst *alloc = new AllocaInst(typeOf(type), id.name.c_str(), context.currentBlock());\r\n    context.locals()[id.name] = alloc;\r\n    if (assignmentExpr != NULL) {\r\n        NAssignment assn(id, *assignmentExpr);\r\n        assn.codeGen(context);\r\n    }\r\n    return alloc;\r\n}\r\n\r\nValue* NFunctionDeclaration::codeGen(CodeGenContext&amp; context)\r\n{\r\n    vector&lt;const type*&gt; argTypes;\r\n    VariableList::const_iterator it;\r\n    for (it = arguments.begin(); it != arguments.end(); it++) {\r\n        argTypes.push_back(typeOf((**it).type));\r\n    }\r\n    FunctionType *ftype = FunctionType::get(typeOf(type), argTypes, false);\r\n    Function *function = Function::Create(ftype, GlobalValue::InternalLinkage, id.name.c_str(), context.module);\r\n    BasicBlock *bblock = BasicBlock::Create(&quot;entry&quot;, function, 0);\r\n\r\n    context.pushBlock(bblock);\r\n\r\n    for (it = arguments.begin(); it != arguments.end(); it++) {\r\n        (**it).codeGen(context);\r\n    }\r\n\r\n    block.codeGen(context);\r\n    ReturnInst::Create(bblock);\r\n\r\n    context.popBlock();\r\n    std::cout &lt;&lt; &quot;Creating function: &quot; &lt;&lt; id.name &lt;&lt; endl;\r\n    return function;\r\n}\r\n<\/pre>\n<p>\u4e0a\u8ff0\u7f57\u5217\u5f88\u591a\u7684\u4ee3\u7801\uff0c\u7136\u800c\u8fd9\u90e8\u4efd\u4ee3\u7801\u7684\u542b\u4e49\u9700\u8981\u4f60\u81ea\u5df1\u53bb\u63a2\u7d22\u3002\u6211\u5728\u8fd9\u91cc\u53ea\u4f1a\u63d0\u53ca\u4e00\u4e0b\u4f60\u9700\u8981\u6ce8\u610f\u7684\u5185\u5bb9\uff1a<\/p>\n<ul>\n<li>\u6211\u4eec\u5728CodeGenContext\u7c7b\u4e2d\u4f7f\u7528\u4e00\u4e2a\u8bed\u53e5\u5757\u7684\u6808\u6765\u4fdd\u5b58\u6700\u540e\u8fdb\u5165\u7684block(\u56e0\u4e3a\u8bed\u53e5\u90fd\u88ab\u589e\u52a0\u5230blocks\u4e2d)\n<li>\u6211\u4eec\u540c\u6837\u7528\u4e2a\u5806\u6808\u6765\u4fdd\u5b58\u6bcf\u7ec4\u8bed\u53e5\u5757\u4e2d\u7684<a href=\"http:\/\/en.wikipedia.org\/wiki\/Symbol_table\">\u7b26\u53f7\u8868<\/a>  <\/li>\n<li>\u6211\u4eec\u8bbe\u8ba1\u7684\u8bed\u8a00\u53ea\u4f1a\u77e5\u9053\u4ed6\u5f53\u524d\u8303\u56f4\u5185\u7684\u5185\u5bb9.\u8981\u652f\u6301\u201c\u5168\u5c40\u201d\u4e0a\u4e0b\u7684\u505a\u6cd5\uff0c\u4f60\u5fc5\u987b\u5411\u4e0a\u641c\u7d22\u6574\u4e2a\u5806\u6808\u4e2d\u6bcf\u4e00\u4e2a\u8bed\u53e5\u5757\uff0c\u77e5\u9053\u4f60\u6700\u540e\u53d1\u73b0\u4f60\u5339\u914d\u7684\u7b26\u53f7(\u73b0\u5728\u6211\u4eec\u53ea\u662f\u7b80\u5355\u5730\u641c\u7d22\u5806\u6808\u4e2d\u6700\u9876\u5c42\u7684\u7b26\u53f7\u8868)\u3002 <\/li>\n<li>\u5728\u6211\u4eec\u8fdb\u5165\u4e00\u4e2a\u8bed\u53e5\u5757\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8bed\u53e5\u5757\u538b\u6808\uff0c\u79bb\u5f00\u8bed\u53e5\u5757\u65f6\u5c06\u8bed\u53e5\u5757\u51fa\u6808 <\/li>\n<\/ul>\n<p>\u5269\u4e0b\u7684\u5185\u5bb9\u90fdLLVM\u76f8\u5173\u4e86\uff0c\u5728\u8fd9\u4e2a\u4e3b\u9898\u4e0a\u6211\u5e76\u4e0d\u662f\u4e13\u5bb6\u3002\u4f46\u662f\u8fc4\u4eca\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u7f16\u8bd1\u548c\u8fd0\u884c\u6211\u4eec\u8bed\u8a00\u7684\u6240\u6709\u4ee3\u7801\u3002<\/p>\n<p><h2>7\u3001\u7f16\u8bd1\u548c\u8fd0\u884c\u6211\u4eec\u7684\u8bed\u8a00<\/h2>\n<\/p>\n<p><h3>7.1\u3001\u7f16\u8bd1\u6211\u4eec\u7684\u8bed\u8a00<\/h3>\n<\/p>\n<p>\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4ee3\u7801\uff0c\u73b0\u5728\u6211\u4eec\u600e\u4e48\u8fd0\u884c\u5b83\uff1fLLVM\u6709\u7740\u975e\u5e38\u590d\u6742\u7684\u8054\u63a5link\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u4f60\u662f\u81ea\u5df1\u5b89\u88c5\u7684LLVM\uff0c\u90a3\u4e48\u4f60\u5c31\u5e94\u8be5\u6709\u4e00\u4e2allvm-config\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u8fd4\u56de\u4f60\u9700\u8981\u7684\u6240\u6709\u7f16\u8bd1\u548c\u8054\u63a5\u9009\u9879\u3002<br \/>\n\u6211\u4eec\u4e5f\u8981\u540c\u65f6\u66f4\u65b0\u6211\u4eec\u7684main.cpp\u7684\u5185\u5bb9\u4f7f\u4e4b\u53ef\u4ee5\u7f16\u8bd1\u548c\u8fd0\u884c\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u8fd9\u6b21\u6211\u4eecmain.cpp\u7684\u5185\u5bb9\u5982\u4e0b\uff1a<\/p>\n<pre data-enlighter-language=\"c\" class=\"EnlighterJSRAW\">\r\n#include &lt;iostream&gt;\r\n#include &quot;codegen.h&quot;\r\n#include &quot;node.h&quot;\r\n\r\nusing namespace std;\r\n\r\nextern int yyparse();\r\nextern NBlock* programBlock;\r\n\r\nint main(int argc, char **argv)\r\n{\r\n    yyparse();\r\n    std::cout &lt;&lt; programBlock &lt;&lt; endl;\r\n\r\n    CodeGenContext context;\r\n    context.generateCode(*programBlock);\r\n    context.runCode();\r\n\r\n    return 0;\r\n}\r\n<\/pre>\n<p>\u73b0\u5728\u6211\u4eec\u9700\u8981\u8fd9\u6837\u6765\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801<br \/>\n$ g++ -o parser <code data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\">llvm-config --libs core jit native --cxxflags --ldflags<\/code> *.cpp<br \/>\n\u4f60\u4e5f\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2aMakefile\u6765\u8fdb\u884c\u7f16\u8bd1<\/p>\n<pre>\r\nall: parser\r\n\r\nclean:\r\n\trm parser.cpp parser.hpp parser tokens.cpp\r\n\r\nparser.cpp: parser.y\r\n\tbison -d -o $@ $^\r\n\r\nparser.hpp: parser.cpp\r\n\r\ntokens.cpp: tokens.l parser.hpp\r\n\tlex -o $@ $^\r\n\r\nparser: parser.cpp codegen.cpp main.cpp tokens.cpp\r\n\tg++ -o $@ <code data-enlighter-language=\"raw\" class=\"EnlighterJSRAW\">llvm-config --libs core jit native --cxxflags --ldflags<\/code> *.cpp\r\n<\/pre>\n<p><h3>7.2\u3001\u8fd0\u884c\u6211\u4eec\u7684\u8bed\u8a00<\/h3>\n<\/p>\n<p>\u5047\u8bbe\u4e0a\u8ff0\u6240\u6709\u5de5\u4f5c\u90fd\u5706\u6ee1\u5b8c\u6210\uff0c\u90a3\u4e48\u73b0\u5728\u4f60\u5c06\u6709\u4e00\u4e2a\u540d\u4e3aparser\u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u3002\u8fd0\u884c\u5b83\uff0c\u8fd8\u8bb0\u5f97\u6211\u4eec\u90a3\u4e2a\u5178\u578b\u4f8b\u5b50\u5417\uff1f\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u5de5\u4f5c\u7684\u5982\u4f55\u3002<\/p>\n<pre>\r\n$ echo 'int do_math(int a) { int x = a * 5 + 3 } do_math(10)' | .\/parser\r\n0x100a00f10\r\nGenerating code...\r\nGenerating code for 20NFunctionDeclaration\r\nCreating variable declaration int a\r\nGenerating code for 20NVariableDeclaration\r\nCreating variable declaration int x\r\nCreating assignment for x\r\nCreating binary operation 276\r\nCreating binary operation 274\r\nCreating integer: 3\r\nCreating integer: 5\r\nCreating identifier reference: a\r\nCreating block\r\nCreating function: do_math\r\nGenerating code for 20NExpressionStatement\r\nGenerating code for 11NMethodCall\r\nCreating integer: 10\r\nCreating method call: do_math\r\nCreating block\r\nCode is generated.\r\n; ModuleID = 'main'\r\n\r\ndefine internal void @main() {\r\nentry:\r\n\t%0 = call i64 @do_math(i64 10)\t\t;  [#uses=0]\r\n\tret void\r\n}\r\n\r\ndefine internal i64 @do_math(i64) {\r\nentry:\r\n\t%a = alloca i64\t\t;  [#uses=1]\r\n\t%x = alloca i64\t\t;  [#uses=1]\r\n\t%1 = add i64 5, 3\t;  [#uses=1]\r\n\t%2 = load i64* %a\t;  [#uses=1]\r\n\t%3 = mul i64 %2, %1\t;  [#uses=1]\r\n\tstore i64 %3, i64* %x\r\n\tret void\r\n}\r\nRunning code...\r\nCode was run.\r\n<\/pre>\n<p><h2>8\u3001\u7ed3\u8bba<\/h2>\n<\/p>\n<p>\u662f\u4e0d\u662f\u975e\u5e38\u7684\u9177\uff1f\u6211\u540c\u610f\u5982\u679c\u4f60\u53ea\u662f\u4ece\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u62f7\u8d1d\u7c98\u8d34\u7684\u8bdd\uff0c\u4f60\u53ef\u80fd\u4f1a\u5bf9\u8fd0\u884c\u5f97\u5230\u7684\u7ed3\u679c\u611f\u89c9\u6709\u70b9\u5931\u671b\uff0c\u4f46\u662f\u8fd9\u70b9\u7ed3\u679c\u53ef\u80fd\u4e5f\u4f1a\u6fc0\u53d1\u4f60\u66f4\u5927\u7684\u5174\u8da3\u3002\u6b64\u5916\uff0c\u8fd9\u5c31\u662f\u672c\u6587\u7684\u610f\u4e49\uff0c\u8fd9\u4e0d\u662f\u672c\u7bc7\u6307\u5bfc\u6587\u7ae0\u7684\u7ed3\u675f\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u5f00\u59cb\u3002\u56e0\u4e3a\u6709\u4e86\u8fd9\u7bc7\u6587\u7ae0\u7684\u4ecb\u7ecd\uff0c\u4f60\u53ef\u4ee5\u5728\u6587\u6cd5\u5206\u6790\uff0c\u8bed\u6cd5\u5206\u6790\u548c\u88c5\u914d\u8bed\u8a00\u7684\u65f6\u5019\u9644\u52a0\u4e0a\u4e00\u4e9b\u75af\u72c2\u7684\u7279\u6027\uff0c\u7136\u540e\u521b\u9020\u51fa\u4e00\u4e2a\u4f60\u81ea\u5df1\u547d\u540d\u7684\u8bed\u8a00\u3002\u4f60\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u7f16\u8bd1\u8bed\u53e5\u5757\u4e86\uff0c\u90a3\u4e48\u4f60\u73b0\u5728\u5e94\u8be5\u5df2\u7ecf\u6709\u5982\u4f55\u7ee7\u7eed\u4e0b\u53bb\u7684\u57fa\u672c\u60f3\u6cd5\u3002<br \/>\n\u672c\u6587\u5b8c\u6574\u7684\u4ee3\u7801\u5728Github<a href=\"http:\/\/github.com\/lsegal\/my_toy_compiler\">\u8fd9\u91cc<\/a>\u3002\u6211\u4e00\u76f4\u90fd\u5728\u907f\u514d\u63d0\u5230\u8fd9\u4e2a\u4ee3\u7801\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4ee3\u7801\u4e0d\u662f\u672c\u6587\u7684\u91cd\u70b9\uff0c\u800c\u4ec5\u4ec5\u662f\u5e26\u8fc7\u8fd9\u90e8\u5206\u4ee3\u7801\u3002<\/p>\n<p>\u6211\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u7bc7\u975e\u5e38\u957f\u7684\u6587\u7ae0\uff0c\u5e76\u4e14\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u96be\u514d\u4f1a\u6709\u51fa\u9519\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f60\u627e\u5230\u4e86\u4efb\u4f55\u95ee\u9898\uff0c\u5728\u4f60\u89c9\u5f97\u6709\u7a7a\u7684\u65f6\u5019\uff0c\u6b22\u8fce\u4f60\u7ed9\u6211\u53d1\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u5c06\u4f1a\u8c03\u6574\u6211\u7684\u6587\u7ae0\u3002\u4f60\u5982\u679c\u5411\u60f3\u6211\u4eec\u5171\u4eab\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u4f60\u89c9\u5f97\u6709\u7a7a\u7684\u65f6\u5019\u5199\u4fe1\u7ed9\u6211\u4eec\u3002<\/p>\n","raw":"","protected":false},"excerpt":{"rendered":"<p>\u4f7f\u7528Flex Bison \u548c LLVM\u7f16\u5199\u4f60\u81ea\u5df1\u7684\u7f16\u8bd1\u5668 \u539f\u6587\u51fa\u5904\uff1ahttp:\/\/gnuu.org\/2009\/09\/18\/writing-your-own-to&#8230;<\/p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https:\/\/coolshell.cn\/articles\/1547.html\"> Read More<span class=\"screen-reader-text\">  Read More<\/span><\/a><\/p>\n","protected":false},"author":4,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5,23],"tags":[213],"series":[],"aioseo_notices":[],"views":54438,"post_thumbnail_image":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","content_first_image":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","post_medium_image_300":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","post_thumbnail_image_624":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","post_frist_image":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","post_medium_image":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","post_large_image":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","post_full_image":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","post_all_images":[{"imagesurl":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/pipeline.png","id":"image0"},{"imagesurl":"http:\/\/gnuu.org\/wp-content\/uploads\/2009\/09\/ClassDiagram.png","id":"image1"}],"videoAdId":"","listAd":"0","listAdId":"","listAdEvery":5,"total_comments":31,"category_name":"C\/C++\u8bed\u8a00","post_date":"2009-10-12","like_count":"0","praiseWord":"\u9f13\u52b1","excitationAd":"0","rewardedVideoAdId":"","detailAdId":"","detailAd":"0","enterpriseMinapp":"0","audios":[],"postImageUrl":"http:\/\/coolshell.cn\/wp-content\/uploads\/2016\/09\/coolshell-360x200.jpg","avatarurls":[],"related_posts":[],"pageviews":54439,"pageviews_wl":47488,"ratings_average":4,"ratings_total":106,"ratings_users":25,"next_post_id":1654,"next_post_title":"Richard Feynman, \u6311\u6218\u8005\u53f7, \u8f6f\u4ef6\u5de5\u7a0b","previous_post_id":1443,"previous_post_title":"C++\u7684std::string\u7684\u201c\u8bfb\u65f6\u4e5f\u62f7\u8d1d\u201d\u6280\u672f\uff01"}