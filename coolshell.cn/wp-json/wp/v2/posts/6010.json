{"id":6010,"date":"2011-11-29T11:11:07","date_gmt":"2011-11-29T03:11:07","guid":{"rendered":"http:\/\/coolshell.cn\/?p=6010"},"modified":"2011-11-29T12:32:33","modified_gmt":"2011-11-29T04:32:33","slug":"%e4%b8%80%e4%ba%9b%e6%9c%89%e6%84%8f%e6%80%9d%e7%9a%84%e7%ae%97%e6%b3%95%e4%bb%a3%e7%a0%81","status":"publish","type":"post","link":"https:\/\/coolshell.cn\/articles\/6010.html","title":{"rendered":"\u4e00\u4e9b\u6709\u610f\u601d\u7684\u7b97\u6cd5\u4ee3\u7801"},"content":{"rendered":"<p>Keith Schwarz\u662f\u4e00\u4e2a\u65af\u5766\u798f\u5927\u5b66\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u7684\u8bb2\u5e08\u3002\u4ed6\u5bf9\u7f16\u7a0b\u5145\u6ee1\u4e86\u70ed\u60c5\u3002\u4ed6\u7684\u4e3b\u9875\u4e0a\u4ed6\u81ea\u5df1\u6b63\u5728\u5b9e\u73b0\u5404\u79cd\u5404\u6837\u7684\u6709\u610f\u601d\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0c<a href=\"http:\/\/www.keithschwarz.com\/interesting\/\">http:\/\/www.keithschwarz.com\/interesting\/<\/a>\uff0c\u00a0\u76ee\u524d\u8fd9\u4e2a\u7f51\u9875\u4e0a\u670988\u4e2a\uff08\u89c1\u4e0b\u9762\u7684\u5217\u8868\uff09\uff0c\u4f46\u8fd9\u4f4d\u5927\u54e5\u8981\u5e72135\u4e2a\uff0c\u4f60\u53ef\u4ee5\u770b\u770b\u4ed6\u7684<a href=\"http:\/\/www.keithschwarz.com\/interesting\/\" target=\"_blank\">To-Do List<\/a>\u3002<\/p>\n<p>\u4ece\u8fd9\u4e2a\u5217\u8868\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4ed6\u4ece\u53bb\u5e747\u6708\u4efd\u5c31\u5728\u81ea\u5df1\u5b9e\u73b0\u8fd9\u4e9b\u4e1c\u897f\u4e86\uff0c\u6211\u628a\u4ed6\u5b9e\u73b0\u7684\u8fd9\u4e9b\u7b97\u6cd5\u8f6c\u8fc7\u6765\uff0c<\/p>\n<ul>\n<li>\u4e00\u65b9\u9762\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\u8fd9\u4e9b\u7b97\u6cd5\u548c\u4ee3\u7801\uff0c\u56e0\u4e3a\u5f88\u591a\u4e1c\u897f\u5bf9\u6211\u6765\u8bf4\u90fd\u6bd4\u8f83\u65b0\uff0c\u6211\u4ee5\u524d<a href=\"https:\/\/coolshell.cn\/articles\/2583.html\" target=\"_blank\">\u5217\u4e3e\u8fc7\u4e00\u4e9b\u7ecf\u5178\u7684\u7b97\u6cd5<\/a>\uff0c<a title=\"\u94fe\u63a5\uff1a\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u8bcd\u5178\" href=\"https:\/\/coolshell.cn\/articles\/1499.html\" rel=\"bookmark\">\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u8bcd\u5178<\/a>\uff0c\u8fd8\u6709<a title=\"\u94fe\u63a5\uff1a\u53ef\u89c6\u5316\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\" href=\"https:\/\/coolshell.cn\/articles\/4671.html\" rel=\"bookmark\">\u53ef\u89c6\u5316\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5<\/a>\uff0c\u00a0\u4e0d\u8fc7\u611f\u89c9\u90fd\u6ca1\u6709\u8fd9\u4e2a\u5168\u3002<\/li>\n<\/ul>\n<ul>\n<li>\u53e6\u4e00\u65b9\u9762\u6211\u5e0c\u671b\u8fd9\u4e2a\u4e8b\u53ef\u4ee5\u5f71\u54cd\u5230\u4e00\u4e9b\u6b63\u5728\u5b66\u4e60\u7f16\u7a0b\u7684\u4eba\u3002\u770b\u770b\u522b\u4eba\u662f\u600e\u4e48\u5b66\u4e60\u7f16\u7a0b\u7684\uff0c\u5e0c\u671b\u5bf9\u4f60\u6709\u501f\u9274\u4f5c\u7528\u3002<\/li>\n<\/ul>\n<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"6\">\n<thead>\n<tr>\n<th>Name<\/th>\n<th>Link<\/th>\n<th>Date\u00a0Added<\/th>\n<th>Language<\/th>\n<th>Description<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>Binomial Heap<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=binomial-heap\">(link)<\/a><\/td>\n<td>7\u201124\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Binomial_heap\">binomial heap<\/a>\u00a0data structure for use as a priority queue.<\/td>\n<\/tr>\n<tr>\n<td>Bounded Priority Queue<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=bounded-pqueue\">(link)<\/a><\/td>\n<td>7\u201124\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Priority_queue\">priority queue<\/a>\u00a0with a fixed upper limit to its size..<\/td>\n<\/tr>\n<tr>\n<td>Matrix<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=matrix\">(link)<\/a><\/td>\n<td>7\u201124\u20112010<\/td>\n<td>C++<\/td>\n<td>A collection of classes for manipulating\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Matrix_%28mathematics%29\">matrices<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>VList<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=vlist\">(link)<\/a><\/td>\n<td>8\u201116\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of the\u00a0<tt>List<\/tt>\u00a0abstraction backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/VList\">VList<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Function Wrapper<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=function\">(link)<\/a><\/td>\n<td>8\u201116\u20112010<\/td>\n<td>C++<\/td>\n<td>A C++ wrapper class around unary functions.<\/td>\n<\/tr>\n<tr>\n<td>String<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=string\">(link)<\/a><\/td>\n<td>8\u201117\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/String_(computer_science)\">string<\/a>\u00a0abstraction that uses the small string optimization.<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p><!--more--><\/p>\n<table>\n<tbody>\n<tr>\n<td>nstream<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=nstream\">(link)<\/a><\/td>\n<td>8\u201131\u20112010<\/td>\n<td>C++<\/td>\n<td>An stream class that sends and receives data over a network.<\/td>\n<\/tr>\n<tr>\n<td>Snake<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=snake\">(link)<\/a><\/td>\n<td>8\u201131\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the game\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Snake_(video_game)\"><em>Snake<\/em><\/a>\u00a0with a rudimentary AI.<\/td>\n<\/tr>\n<tr>\n<td>Mergesort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=mergesort\">(link)<\/a><\/td>\n<td>9\u201114\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Mergesort\">mergesort<\/a>\u00a0algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Next Permutation<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=next-permutation\">(link)<\/a><\/td>\n<td>10\u20116\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/www.cplusplus.com\/reference\/algorithm\/next_permutation\/\"><tt>next_permutation<\/tt><\/a>\u00a0STL algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Interval Heap<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=interval-heap\">(link)<\/a><\/td>\n<td>10\u201117\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Double-ended_priority_queue\">double-ended priority queue<\/a>\u00a0using an\u00a0<a href=\"http:\/\/www.mhhe.com\/engcs\/compsci\/sahni\/enrich\/c9\/interval.pdf\">interval heap<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Linear-Time Selection<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=median-of-medians\">(link)<\/a><\/td>\n<td>10\u201118\u20112010<\/td>\n<td>C++<\/td>\n<td>A deterministic, linear-time\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Selection_algorithm\">selection algorithm<\/a>\u00a0using the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Selection_algorithm#Linear_general_selection_algorithm_-_Median_of_Medians_algorithm\">median-of-medians<\/a>\u00a0algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Heapsort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=heapsort\">(link)<\/a><\/td>\n<td>10\u201118\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Heapsort\">heapsort<\/a>\u00a0algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Union-Find<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=union-find\">(link)<\/a><\/td>\n<td>10\u201119\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Disjoint-set_data_structure\">disjoint-set data structure<\/a>\u00a0using a disjoint set forest.<\/td>\n<\/tr>\n<tr>\n<td>Radix Sort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=radix-sort\">(link)<\/a><\/td>\n<td>10\u201119\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Radix_sort\">radix sort<\/a>\u00a0algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Rational<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=rational\">(link)<\/a><\/td>\n<td>10\u201123\u20112010<\/td>\n<td>C++<\/td>\n<td>A data structure representing a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Rational_number\">rational number<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>DPLL<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=dpll\">(link)<\/a><\/td>\n<td>10\u201123\u20112010<\/td>\n<td>Haskell<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/DPLL_algorithm\">DPLL algorithm<\/a>\u00a0for solving\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Boolean_satisfiability_problem\">CNF-SAT<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Smoothsort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=smoothsort\">(link)<\/a><\/td>\n<td>10\u201127\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/www.keithschwarz.com\/smoothsort\/\">smoothsort algorithm<\/a>, an adaptive heapsort variant.<\/td>\n<\/tr>\n<tr>\n<td>Extendible Array<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=extendible-array\">(link)<\/a><\/td>\n<td>10\u201128\u20112010<\/td>\n<td>Java<\/td>\n<td>A\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Dynamic_array\">dynamic array<\/a>\u00a0class with O(1) worst-case runtime lookup and append.<\/td>\n<\/tr>\n<tr>\n<td>In-Place Merge<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=inplace-merge\">(link)<\/a><\/td>\n<td>10\u201129\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Merge_algorithm\">merge algorithm<\/a>\u00a0that runs\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/In-place_algorithm\">in-place<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Random Shuffle<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=random-shuffle\">(link)<\/a><\/td>\n<td>10\u201129\u20112010<\/td>\n<td>C++<\/td>\n<td>An algorithm for generating a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Random_permutation\">random permutation<\/a>\u00a0of a set of elements.<\/td>\n<\/tr>\n<tr>\n<td>Random Sample<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=random-sample\">(link)<\/a><\/td>\n<td>10\u201129\u20112010<\/td>\n<td>C++<\/td>\n<td>An O(n) time, O(1) space algorithm for randomly choosing k elements out of a stream with uniform probability.<\/td>\n<\/tr>\n<tr>\n<td>Natural Mergesort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=natural-mergesort\">(link)<\/a><\/td>\n<td>10\u201130\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/www.algorithmist.com\/index.php\/Merge_sort#Natural_mergesort\">natural mergesort<\/a>, an\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Adaptive_sort\">adaptive<\/a>\u00a0variant of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Merge_sort\">mergesort<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Interpolation Search<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=interpolation-search\">(link)<\/a><\/td>\n<td>10\u201131\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Interpolation_search\">interpolation search<\/a>\u00a0algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Introsort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=introsort\">(link)<\/a><\/td>\n<td>10\u201131\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Introsort\">introsort<\/a>\u00a0algorithm, a fast hybrid of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Quicksort\">quicksort<\/a>,\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Heapsort\">heapsort<\/a>, and<a href=\"http:\/\/en.wikipedia.org\/wiki\/Insertion_sort\">insertion sort<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Hashed Array Tree<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=hashed-array-tree\">(link)<\/a><\/td>\n<td>11\u20113\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of a dynamic array backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Hashed_array_tree\">hashed array tree<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Recurrence Solver<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=recurrence\">(link)<\/a><\/td>\n<td>11\u201113\u20112010<\/td>\n<td>C++<\/td>\n<td>A fast algorithm for generating terms of a sequence defined by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Recurrence_relation#Linear_homogeneous_recurrence_relations_with_constant_coefficients\">linear recurrence relation<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Fibonacci Heap<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=fibonacci-heap\">(link)<\/a><\/td>\n<td>11\u201115\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of a priority queue backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Fibonacci_heap\">Fibonacci heap<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Dijkstra&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=dijkstra\">(link)<\/a><\/td>\n<td>11\u201116\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Dijkstra's_algorithm\">Dijkstra&#8217;s algorithm<\/a>\u00a0for single-source shortest paths.<\/td>\n<\/tr>\n<tr>\n<td>Prim&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=prim\">(link)<\/a><\/td>\n<td>11\u201117\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Prim's_algorithm\">Prim&#8217;s algorithm<\/a>\u00a0for computing\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Minimum_spanning_tree\">minimum spanning trees<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Kruskal&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=kruskal\">(link)<\/a><\/td>\n<td>11\u201117\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Kruskal's_algorithm\">Kruskal&#8217;s algorithm<\/a>\u00a0for computing\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Minimum_spanning_tree\">minimum spanning trees<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Majority Element<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=majority-element\">(link)<\/a><\/td>\n<td>11\u201117\u20112010<\/td>\n<td>C++<\/td>\n<td>A fast, linear-time algorithm for finding the\u00a0<a href=\"http:\/\/www.cs.utexas.edu\/~moore\/best-ideas\/mjrty\/\">majority element<\/a>\u00a0of a data set.<\/td>\n<\/tr>\n<tr>\n<td>Haar Transform<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=haar\">(link)<\/a><\/td>\n<td>11\u201117\u20112010<\/td>\n<td>C++<\/td>\n<td>A set of functions to decompose a sequence of values into a sum of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Haar_wavelet\">Haar wavelets<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Argmax<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=argmax\">(link)<\/a><\/td>\n<td>11\u201119\u20112010<\/td>\n<td>C++<\/td>\n<td>A pair of functions to compute the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Arg_max\">arg min or max<\/a>\u00a0of a function on some range.<\/td>\n<\/tr>\n<tr>\n<td>Derivative<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=derivative\">(link)<\/a><\/td>\n<td>11\u201119\u20112010<\/td>\n<td>C++<\/td>\n<td>A\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Function_object\">function object<\/a>\u00a0that approximates the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Derivative\">derivative<\/a>\u00a0of a function.<\/td>\n<\/tr>\n<tr>\n<td>Levenshtein Distance<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=levenshtein\">(link)<\/a><\/td>\n<td>11\u201119\u20112010<\/td>\n<td>C++<\/td>\n<td>An algorithm for computing the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Levenshtein_distance\">Levenshtein distance<\/a>\u00a0between two sequences.<\/td>\n<\/tr>\n<tr>\n<td>Skiplist<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=skiplist\">(link)<\/a><\/td>\n<td>11\u201120\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Skip_list\">skip list<\/a>, a randomized data structure for maintaining a sorted collection.<\/td>\n<\/tr>\n<tr>\n<td>van Emde Boas Tree<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=van-emde-boas-tree\">(link)<\/a><\/td>\n<td>11\u201126\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a sorted associative array backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Van_Emde_Boas_tree\">van Emde Boas tree<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Cuckoo HashMap<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=cuckoo-hashmap\">(link)<\/a><\/td>\n<td>11\u201127\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Hash_table\">hash table<\/a>\u00a0using\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Cuckoo_hashing\">cuckoo hashing<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Needleman-Wunsch Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=needleman-wunsch\">(link)<\/a><\/td>\n<td>11\u201128\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Needleman%E2%80%93Wunsch_algorithm\">Needleman-Wunsch<\/a>\u00a0algorithm for optimal string alignment.<\/td>\n<\/tr>\n<tr>\n<td>Treap<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=treap\">(link)<\/a><\/td>\n<td>11\u201128\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a sorted associative array backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Treap\">treap<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Floyd-Warshall Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=floyd-warshall\">(link)<\/a><\/td>\n<td>12\u201110\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Floyd-Warshall_algorithm\">Floyd-Warshall algorithm<\/a>\u00a0for all-pairs shortest paths in a graph.<\/td>\n<\/tr>\n<tr>\n<td>Power Iteration<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=power-iteration\">(link)<\/a><\/td>\n<td>12\u201110\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Power_iteration\">power iteration<\/a>\u00a0algorithm for finding dominant eigenvectors.<\/td>\n<\/tr>\n<tr>\n<td>Edmonds&#8217;s Matching Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=edmonds-matching\">(link)<\/a><\/td>\n<td>12\u201115\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Edmonds's_matching_algorithm\">Edmonds&#8217;s matching algorithm<\/a>\u00a0for finding\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Matching_(graph_theory)#Maximum_matchings\">maximum matchings<\/a>\u00a0in undirected graphs.<\/td>\n<\/tr>\n<tr>\n<td>Kosaraju&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=kosaraju\">(link)<\/a><\/td>\n<td>12\u201115\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Kosaraju's_algorithm\">Kosaraju&#8217;s algorithm<\/a>\u00a0algorithm for finding\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Strongly_connected_component\">strongly connected components<\/a>\u00a0of a directed graph.<\/td>\n<\/tr>\n<tr>\n<td>2-SAT<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=2sat\">(link)<\/a><\/td>\n<td>12\u201115\u20112010<\/td>\n<td>Java<\/td>\n<td>A linear-time algorithm for solving\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/2-satisfiability\">2-SAT<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Bellman-Ford Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=bellman-ford\">(link)<\/a><\/td>\n<td>12\u201117\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Bellman%E2%80%93Ford_algorithm\">Bellman-Ford<\/a>\u00a0algorithm for single-source shortest paths.<\/td>\n<\/tr>\n<tr>\n<td>Topological Sort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=topological-sort\">(link)<\/a><\/td>\n<td>12\u201117\u20112010<\/td>\n<td>Java<\/td>\n<td>An algorithm for computing a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Topological_sorting\">topological sort<\/a>\u00a0of a directed acyclic graph.<\/td>\n<\/tr>\n<tr>\n<td>Graham Scan<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=graham-scan\">(link)<\/a><\/td>\n<td>12\u201119\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Graham_scan\">Graham scan<\/a>\u00a0for finding convex hulls in 2D space.<\/td>\n<\/tr>\n<tr>\n<td>Bipartite Testing<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=bipartite-verify\">(link)<\/a><\/td>\n<td>12\u201119\u20112010<\/td>\n<td>Java<\/td>\n<td>A linear-time algorithm for checking whether a directed graph is\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Bipartite_graph\">bipartite<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Johnson&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=johnson\">(link)<\/a><\/td>\n<td>12\u201119\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Johnson's_algorithm\">Johnson&#8217;s algorithm<\/a>\u00a0for all-pairs shortest paths.<\/td>\n<\/tr>\n<tr>\n<td>Strassen Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=strassen\">(link)<\/a><\/td>\n<td>12\u201120\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Strassen_algorithm\">Strassen algorithm<\/a>\u00a0for fast matrix multiplication.<\/td>\n<\/tr>\n<tr>\n<td>Cartesian Tree Sort<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=cartesian-tree-sort\">(link)<\/a><\/td>\n<td>12\u201121\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Cartesian_tree#Application_in_sorting\">Cartesian tree sort<\/a>, an adaptive, out-of-place heapsort variant.<\/td>\n<\/tr>\n<tr>\n<td>Ford-Fulkerson Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=ford-fulkerson\">(link)<\/a><\/td>\n<td>12\u201121\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Ford%E2%80%93Fulkerson_algorithm\">Ford-Fulkerson<\/a>\u00a0maximum-flow algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Scaling Ford-Fulkerson<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=ford-fulkerson-scaling\">(link)<\/a><\/td>\n<td>12\u201122\u20112010<\/td>\n<td>Java<\/td>\n<td>An modification of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Ford%E2%80%93Fulkerson_algorithm\">Ford-Fulkerson<\/a>\u00a0maximum-flow algorithm that uses scaling to achieve polynomial time..<\/td>\n<\/tr>\n<tr>\n<td>Splay Tree<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=splay-tree\">(link)<\/a><\/td>\n<td>12\u201127\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a sorted associative array backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Splay_tree\">splay tree<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Ternary Search Tree<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=ternary-search-tree\">(link)<\/a><\/td>\n<td>12\u201128\u20112010<\/td>\n<td>C++<\/td>\n<td>An implementation of a sorted set of strings backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Ternary_search_tree\">ternary search tree<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Ring Buffer<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=ring-buffer\">(link)<\/a><\/td>\n<td>12\u201130\u20112010<\/td>\n<td>Java<\/td>\n<td>An implementation of a FIFO queue using a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Circular_buffer\">ring buffer<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>AVL Tree<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=avl-tree\">(link)<\/a><\/td>\n<td>12\u201130\u20112010<\/td>\n<td>C++<\/td>\n<td>A sorted associative container backed by an\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/AVL_tree\">AVL tree<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Rabin-Karp Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=rabin-karp\">(link)<\/a><\/td>\n<td>1\u20111\u20112011<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Rabin%E2%80%93Karp_string_search_algorithm\">Rabin-Karp algorithm<\/a>\u00a0for string matching.<\/td>\n<\/tr>\n<tr>\n<td>RPN Evaluator<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=rpn-evaluate\">(link)<\/a><\/td>\n<td>1\u201118\u20112011<\/td>\n<td>C++ \/ strain<\/td>\n<td>A library to tokenize and evaluate simple arithmetic expressions in\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Reverse_Polish_notation\">reverse Polish notation<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Shunting-Yard Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=shunting-yard\">(link)<\/a><\/td>\n<td>1\u201118\u20112011<\/td>\n<td>C++ \/ strain<\/td>\n<td>An implementation of Dijkstra&#8217;s\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Shunting-yard_algorithm\">shunting-yard algorithm<\/a>\u00a0for converting infix expressions to reverse-Polish notation.<\/td>\n<\/tr>\n<tr>\n<td>Skew Binomial Heap<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=skew-binomial-heap\">(link)<\/a><\/td>\n<td>1\u201120\u20112011<\/td>\n<td>C++<\/td>\n<td>An implementation of a priority queue backed by a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Skew_binomial_heap\">skew binomial heap<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>2\/3 Heap<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=two-three-heap\">(link)<\/a><\/td>\n<td>3\u20111\u20112011<\/td>\n<td>C++<\/td>\n<td>An implementation of a priority queue whose branching factor alternates at different levels to maximize performance.<\/td>\n<\/tr>\n<tr>\n<td>Zeckendorf Logarithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=zeckendorf-logarithm\">(link)<\/a><\/td>\n<td>3\u201110\u20112011<\/td>\n<td>C++<\/td>\n<td>An algorithm based on\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Zeckendorf's_theorem\">Zeckendorf representations<\/a>\u00a0that efficiently computes logarithms.<\/td>\n<\/tr>\n<tr>\n<td>Factoradic Permutations<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=factoradic-permutation\">(link)<\/a><\/td>\n<td>3\u201117\u20112011<\/td>\n<td>C++<\/td>\n<td>A set of algorithms for generating\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Permutation\">permutations<\/a>\u00a0using the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Factorial_number_system\">factoradic number system<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Binary Cyclic Subsets<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=binary-subset\">(link)<\/a><\/td>\n<td>3\u201120\u20112011<\/td>\n<td>C++<\/td>\n<td>A set of algorithms for generating\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Subset\">subsets<\/a>\u00a0in\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Lexicographical_order\">lexicographical order<\/a>\u00a0using\u00a0<a href=\"http:\/\/www.keithschwarz.com\/binary-subsets\">binary numbers and cyclic shifts<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Fibonacci Iterator<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=fibonacci-iterator\">(link)<\/a><\/td>\n<td>3\u201122\u20112011<\/td>\n<td>C++<\/td>\n<td>An STL-style iterator for iterating over the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Fibonacci_number\">Fibonacci numbers<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Fibonacci Search<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=fibonacci-search\">(link)<\/a><\/td>\n<td>3\u201122\u20112011<\/td>\n<td>C++<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Fibonacci_search_technique\">Fibonacci search<\/a>\u00a0algorithm.<\/td>\n<\/tr>\n<tr>\n<td>Euclid&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=euclid\">(link)<\/a><\/td>\n<td>4\u201118\u20112011<\/td>\n<td>Haskell<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Euclidean_algorithm\">Euclid&#8217;s algorithm<\/a>\u00a0and applications to\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Continued_fraction\">continued fractions<\/a>\u00a0and\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Extended_Euclidean_algorithm\">the extended Euclidean algorithm<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Find Duplicate<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=find-duplicate\">(link)<\/a><\/td>\n<td>4\u201118\u20112011<\/td>\n<td>Python<\/td>\n<td>An algorithm to find a repeated element in an array using\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Cycle_detection#Tortoise_and_hare\">Floyd&#8217;s cycle-finding algorithm<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Permutation Generator<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=permutation-generator\">(link)<\/a><\/td>\n<td>4\u201119\u20112011<\/td>\n<td>Python<\/td>\n<td>A\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Generator_(computer_programming)\">generator<\/a>\u00a0for producing all\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Permutation\">permutations<\/a>\u00a0of a list of elements.<\/td>\n<\/tr>\n<tr>\n<td>Matrix Find<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=matrix-find\">(link)<\/a><\/td>\n<td>4\u201119\u20112011<\/td>\n<td>Python<\/td>\n<td>A solution to the classic interview question of searching a sorted matrix for a particular value.<\/td>\n<\/tr>\n<tr>\n<td>Binary GCD<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=binary-gcd\">(link)<\/a><\/td>\n<td>4\u201123\u20112011<\/td>\n<td>Scheme<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Binary_GCD_algorithm\">binary GCD algorithm<\/a>\u00a0for computing greatest common divisors of nonnegative integers.<\/td>\n<\/tr>\n<tr>\n<td>Knuth-Morris-Pratt Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=knuth-morris-pratt\">(link)<\/a><\/td>\n<td>5\u20113\u20112011<\/td>\n<td>Python<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\">Knuth-Morris-Pratt algorithm<\/a>\u00a0for fast string matching.<\/td>\n<\/tr>\n<tr>\n<td>Kadane&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=kadane\">(link)<\/a><\/td>\n<td>5\u20117\u20112011<\/td>\n<td>C++<\/td>\n<td>An implementation of Kadane&#8217;s algorithm for solving the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Maximum_subarray_problem\">maximum-weight subarray problem<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Karatsuba&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=karatsuba\">(link)<\/a><\/td>\n<td>8\u201115\u20112011<\/td>\n<td>Python<\/td>\n<td>An implementation of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Karatsuba_algorithm\">Karatsuba&#8217;s algorithm<\/a>\u00a0for fast integer multiplication.<\/td>\n<\/tr>\n<tr>\n<td>Min-Stack<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=min-stack\">(link)<\/a><\/td>\n<td>8\u201115\u20112011<\/td>\n<td>C++<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Stack_(data_structure)\">LIFO stack<\/a>\u00a0that supports O(1) push, pop, and find-minimum.<\/td>\n<\/tr>\n<tr>\n<td>Random Bag<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=random-bag\">(link)<\/a><\/td>\n<td>8\u201115\u20112011<\/td>\n<td>Python<\/td>\n<td>A data structure that supports insertion and removal of a uniformly-random element.<\/td>\n<\/tr>\n<tr>\n<td>Min-Queue<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=min-queue\">(link)<\/a><\/td>\n<td>8\u201115\u20112011<\/td>\n<td>C++<\/td>\n<td>An implementation of a\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Queue_(data_structure)\">FIFO queue<\/a>\u00a0that supports O(1) push, pop, and find-minimum.<\/td>\n<\/tr>\n<tr>\n<td>Lights-Out Solver<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=lights-out\">(link)<\/a><\/td>\n<td>8\u201129\u20112011<\/td>\n<td>C++<\/td>\n<td>A solver for the game\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Lights_Out_(game)\">Lights Out<\/a>\u00a0using\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Gaussian_elimination\">Gaussian elimination<\/a>\u00a0over\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/GF(2)\">GF(2)<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Maximum Single-Sell Profit<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=single-sell-profit\">(link)<\/a><\/td>\n<td>11\u20119\u20112011<\/td>\n<td>Python<\/td>\n<td>Four algorithms for the\u00a0<a href=\"http:\/\/stackoverflow.com\/q\/7086464\/501557\">maximum single-sell profit problem<\/a>, each showing off a different algorithmic technique.<\/td>\n<\/tr>\n<tr>\n<td>Generalized Kadane&#8217;s Algorithm<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=generalized-kadane\">(link)<\/a><\/td>\n<td>11\u201110\u20112011<\/td>\n<td>C++<\/td>\n<td>A generalization of\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Maximum_subarray_problem\">Kadane&#8217;s algorithm<\/a>\u00a0for solving the maximum subarray problem subject to a\u00a0<a href=\"http:\/\/stackoverflow.com\/q\/7861387\/501557\">length restriction<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Longest Range<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=longest-range\">(link)<\/a><\/td>\n<td>11\u201119\u20112011<\/td>\n<td>Java<\/td>\n<td>An algorithm for solving the\u00a0<a href=\"http:\/\/stackoverflow.com\/q\/5415305\/501557\">longest contiguous range<\/a>\u00a0problem.<\/td>\n<\/tr>\n<tr>\n<td>Egyptian Fractions<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=egyptian-fraction\">(link)<\/a><\/td>\n<td>11\u201120\u20112011<\/td>\n<td>Python<\/td>\n<td>An implementation of the\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Greedy_algorithm_for_Egyptian_fractions\">greedy algorithm<\/a>\u00a0for finding\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Egyptian_fraction\">Egyptian fractions<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>LL(1) Parser Generator<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=ll1\">(link)<\/a><\/td>\n<td>11\u201121\u20112011<\/td>\n<td>Java<\/td>\n<td>An\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/LL_parser\">LL(1) parser generator<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>LR(0) Parser Generator<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=lr0\">(link)<\/a><\/td>\n<td>11\u201123\u20112011<\/td>\n<td>Java<\/td>\n<td>An\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/LR_parser\">LR(0) parser generator<\/a>.<\/td>\n<\/tr>\n<tr>\n<td>Word Ladders<\/td>\n<td><a href=\"http:\/\/www.keithschwarz.com\/interesting\/code\/?dir=word-ladder\">(link)<\/a><\/td>\n<td>11\u201127\u20112011<\/td>\n<td>JavaScript<\/td>\n<td>A program for finding\u00a0<a href=\"http:\/\/en.wikipedia.org\/wiki\/Word_ladder\">word ladders<\/a>\u00a0between two words.<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>\uff08\u5168\u6587\u5b8c\uff09<\/p>\n","raw":"","protected":false},"excerpt":{"rendered":"<p>Keith Schwarz\u662f\u4e00\u4e2a\u65af\u5766\u798f\u5927\u5b66\u8ba1\u7b97\u673a\u79d1\u5b66\u7cfb\u7684\u8bb2\u5e08\u3002\u4ed6\u5bf9\u7f16\u7a0b\u5145\u6ee1\u4e86\u70ed\u60c5\u3002\u4ed6\u7684\u4e3b\u9875\u4e0a\u4ed6\u81ea\u5df1\u6b63\u5728\u5b9e\u73b0\u5404\u79cd\u5404\u6837\u7684\u6709\u610f\u601d\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0chttp:\/\/www&#8230;<\/p>\n<p class=\"read-more\"><a class=\"btn btn-default\" href=\"https:\/\/coolshell.cn\/articles\/6010.html\"> Read More<span class=\"screen-reader-text\">  Read More<\/span><\/a><\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5,4,33,12,10,3],"tags":[76,59,77],"series":[],"aioseo_notices":[],"views":65822,"post_thumbnail_image":"","content_first_image":"","post_medium_image_300":"","post_thumbnail_image_624":"","post_frist_image":"","post_medium_image":"","post_large_image":"","post_full_image":"","post_all_images":[],"videoAdId":"","listAd":"0","listAdId":"","listAdEvery":5,"total_comments":45,"category_name":"C\/C++\u8bed\u8a00","post_date":"2011-11-29","like_count":"0","praiseWord":"\u9f13\u52b1","excitationAd":"0","rewardedVideoAdId":"","detailAdId":"","detailAd":"0","enterpriseMinapp":"0","audios":[],"postImageUrl":"http:\/\/coolshell.cn\/wp-content\/uploads\/2016\/09\/coolshell-360x200.jpg","avatarurls":[],"related_posts":[],"pageviews":65823,"pageviews_wl":62517,"ratings_average":4,"ratings_total":111,"ratings_users":26,"next_post_id":6043,"next_post_title":"Web\u5f00\u53d1\u4e2d\u9700\u8981\u4e86\u89e3\u7684\u4e1c\u897f","previous_post_id":5987,"previous_post_title":"\u5982\u4f55\u8bbe\u8ba1\u201c\u627e\u56de\u7528\u6237\u5e10\u53f7\u201d\u529f\u80fd"}